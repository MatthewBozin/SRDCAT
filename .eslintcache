[{"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\index.js":"1","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\App.js":"2","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\data\\context.js":"3","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\data\\character.js":"4","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\Error.js":"5","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\Collections.js":"6","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\HeroSheet.js":"7","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\data\\worldstate.js":"8","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\WorldSheet.js":"9","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\utils\\exports.js":"10","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\SlotName.js":"11","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\SaveModal.js":"12","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\ExportModal.js":"13","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\CardScene.js":"14","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\CardEnvironment.js":"15","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\SaveCard.js":"16","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\ImportCard.js":"17","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\ExportCard.js":"18","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\StatSheet.js":"19","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\RandomCharModal.js":"20","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\CardList.js":"21","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\Attributes.js":"22","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\Defenses.js":"23","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\RandomCharCard.js":"24","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\Stats.js":"25","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\Resources.js":"26","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\CardSpell.js":"27","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\CardProp.js":"28","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\Card.js":"29","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\CardCreature.js":"30","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\CardItem.js":"31","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\RollCard.js":"32","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\Defense.js":"33","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\ModalSpellCast.js":"34","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\ModalItemSale.js":"35","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\ModalCreatureEdit.js":"36","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\ModalItemAttack.js":"37","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\ModalLifeEdit.js":"38","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\ModalCreatureAttack.js":"39","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\Stat.js":"40","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\SpellCostCard.js":"41","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\Search.js":"42","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\navigation\\Navbar.js":"43","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\navigation\\Navlet.js":"44","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\bits\\Description.js":"45","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\bits\\Name.js":"46","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\bits\\Flavor.js":"47","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\bits\\Tag.js":"48","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\bits\\AddSubtract.js":"49","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\bits\\Ranks.js":"50","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\bits\\Table.js":"51","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\bits\\NameValuePair.js":"52","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\bits\\HyperText.js":"53","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\ModalCardDisplay.js":"54","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\CardModifier.js":"55","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\ModalTableDisplay.js":"56","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\navigation\\NavMaster.js":"57","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\navigation\\Linklet.js":"58","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\ModalAction.js":"59","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\ModalConnection.js":"60","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\navigation\\Footer.js":"61","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\worldsheet\\Scene.js":"62","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\Notes.js":"63"},{"size":219,"mtime":1632191871752,"results":"64","hashOfConfig":"65"},{"size":2465,"mtime":1648782458958,"results":"66","hashOfConfig":"65"},{"size":101,"mtime":1632191871807,"results":"67","hashOfConfig":"65"},{"size":105,"mtime":1632191871874,"results":"68","hashOfConfig":"65"},{"size":793,"mtime":1640654111617,"results":"69","hashOfConfig":"65"},{"size":2534,"mtime":1648688866960,"results":"70","hashOfConfig":"65"},{"size":4732,"mtime":1648690117700,"results":"71","hashOfConfig":"65"},{"size":107,"mtime":1632871266663,"results":"72","hashOfConfig":"65"},{"size":4183,"mtime":1647394337296,"results":"73","hashOfConfig":"65"},{"size":8337,"mtime":1641942274383,"results":"74","hashOfConfig":"65"},{"size":2205,"mtime":1640653540471,"results":"75","hashOfConfig":"65"},{"size":4346,"mtime":1640653557530,"results":"76","hashOfConfig":"65"},{"size":8015,"mtime":1640653813366,"results":"77","hashOfConfig":"65"},{"size":3377,"mtime":1649979183016,"results":"78","hashOfConfig":"65"},{"size":4368,"mtime":1649978892983,"results":"79","hashOfConfig":"65"},{"size":4181,"mtime":1640653573346,"results":"80","hashOfConfig":"65"},{"size":1854,"mtime":1640653565462,"results":"81","hashOfConfig":"65"},{"size":1317,"mtime":1640653098247,"results":"82","hashOfConfig":"65"},{"size":389,"mtime":1632191873452,"results":"83","hashOfConfig":"65"},{"size":5480,"mtime":1644961162949,"results":"84","hashOfConfig":"65"},{"size":4646,"mtime":1648752567283,"results":"85","hashOfConfig":"65"},{"size":10522,"mtime":1648418912890,"results":"86","hashOfConfig":"65"},{"size":6305,"mtime":1648690884702,"results":"87","hashOfConfig":"65"},{"size":2467,"mtime":1644904156366,"results":"88","hashOfConfig":"65"},{"size":4470,"mtime":1640653406884,"results":"89","hashOfConfig":"65"},{"size":6049,"mtime":1648423422834,"results":"90","hashOfConfig":"65"},{"size":4948,"mtime":1649979029920,"results":"91","hashOfConfig":"65"},{"size":3312,"mtime":1649979241944,"results":"92","hashOfConfig":"65"},{"size":3736,"mtime":1649978800446,"results":"93","hashOfConfig":"65"},{"size":5914,"mtime":1649978358809,"results":"94","hashOfConfig":"65"},{"size":9334,"mtime":1649978661250,"results":"95","hashOfConfig":"65"},{"size":1163,"mtime":1640653033893,"results":"96","hashOfConfig":"65"},{"size":1213,"mtime":1648690933800,"results":"97","hashOfConfig":"65"},{"size":1616,"mtime":1640653781958,"results":"98","hashOfConfig":"65"},{"size":3611,"mtime":1648686783754,"results":"99","hashOfConfig":"65"},{"size":1332,"mtime":1648419300103,"results":"100","hashOfConfig":"65"},{"size":10013,"mtime":1648419110181,"results":"101","hashOfConfig":"65"},{"size":4311,"mtime":1647401977044,"results":"102","hashOfConfig":"65"},{"size":6350,"mtime":1644903916203,"results":"103","hashOfConfig":"65"},{"size":519,"mtime":1648417788764,"results":"104","hashOfConfig":"65"},{"size":2905,"mtime":1649974267268,"results":"105","hashOfConfig":"65"},{"size":3764,"mtime":1647403223899,"results":"106","hashOfConfig":"65"},{"size":587,"mtime":1644455847322,"results":"107","hashOfConfig":"65"},{"size":2936,"mtime":1648689243159,"results":"108","hashOfConfig":"65"},{"size":165,"mtime":1640652633113,"results":"109","hashOfConfig":"65"},{"size":336,"mtime":1640652669049,"results":"110","hashOfConfig":"65"},{"size":181,"mtime":1640652620978,"results":"111","hashOfConfig":"65"},{"size":899,"mtime":1641337574479,"results":"112","hashOfConfig":"65"},{"size":3409,"mtime":1649976590910,"results":"113","hashOfConfig":"65"},{"size":2932,"mtime":1647402736177,"results":"114","hashOfConfig":"65"},{"size":2285,"mtime":1640654030242,"results":"115","hashOfConfig":"65"},{"size":287,"mtime":1640652696124,"results":"116","hashOfConfig":"65"},{"size":700,"mtime":1640654002760,"results":"117","hashOfConfig":"65"},{"size":3780,"mtime":1641337409964,"results":"118","hashOfConfig":"65"},{"size":1042,"mtime":1649978934817,"results":"119","hashOfConfig":"65"},{"size":1464,"mtime":1641334800753,"results":"120","hashOfConfig":"65"},{"size":1540,"mtime":1644455841232,"results":"121","hashOfConfig":"65"},{"size":1641,"mtime":1648690620956,"results":"122","hashOfConfig":"65"},{"size":1381,"mtime":1641334627516,"results":"123","hashOfConfig":"65"},{"size":1333,"mtime":1641336440094,"results":"124","hashOfConfig":"65"},{"size":547,"mtime":1647402969951,"results":"125","hashOfConfig":"65"},{"size":4172,"mtime":1647471149384,"results":"126","hashOfConfig":"65"},{"size":1136,"mtime":1648420278699,"results":"127","hashOfConfig":"65"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},"zh4rwq",{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"130"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"130"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"130"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"130"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"130"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"130"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"130"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"130"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"130"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"130"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"130"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"130"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\index.js",[],["268","269"],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\App.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\data\\context.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\data\\character.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\Error.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\Collections.js",["270","271","272","273"],"import React, { useContext } from \"react\";\r\nimport Navbar from \"../components/navigation/Navbar\";\r\nimport Search from \"../components/cards/Search\";\r\nimport CardList from \"../components/cards/CardList\";\r\nimport Context from \"../data/context\";\r\nlet contextData = require(`../data/orders.json`);\r\n\r\nconst Collections = () => {\r\n  const [context, setContext] = useContext(Context);\r\n\r\n  const filter = (filterBy) => {\r\n    //filterBy sets which property in the card the filter pays attention to. currently it's set to \"tags\"\r\n    let contextObjects = require(`../data/collections/` + context.collections);\r\n    let newData = [];\r\n    contextData[context.collections].map((name) => {\r\n      let element = contextObjects[name];\r\n      let toFilter;\r\n      if (typeof element[filterBy] === \"string\") {\r\n        toFilter = element[filterBy].toLowerCase();\r\n      } else {\r\n        toFilter = [];\r\n        element[filterBy].map((item) => {\r\n          toFilter.push(item.toLowerCase());\r\n        });\r\n      }\r\n      //toFilter is the case (or cases) to compare to the search terms. ex: [\"offensive\",\"chain\"]\r\n      let searchSplit = context.search.toLowerCase().split(\"+\");\r\n      for (let searchTerm of searchSplit) {\r\n        if (!toFilter.includes(searchTerm)) {\r\n          return;\r\n        }\r\n      }\r\n      newData.push(name);\r\n    });\r\n    return newData;\r\n  };\r\n\r\n  const ifSearch = () => {\r\n    let data = require(`../data/collections/` + context.collections);\r\n    if (context.search !== \"\") {\r\n      let filtered = filter(\"tags\");\r\n      if (filtered.length === 0) {\r\n        filtered = filter(\"name\");\r\n      }\r\n      if (filtered.length === 0) {\r\n        return (\r\n          <div className=\"outerbox\">Your search didn't return any hits.</div>\r\n        );\r\n      }\r\n\r\n      return (\r\n        <CardList\r\n          content={filtered}\r\n          form={\"plus\"}\r\n          deleteFrom={\"none\"}\r\n          category={context.collections}\r\n          mode={\"collections\"}\r\n          context={context}\r\n          setContext={setContext}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <CardList\r\n        content={contextData[context.collections]}\r\n        form={\"plus\"}\r\n        deleteFrom={\"none\"}\r\n        category={context.collections}\r\n        mode={\"collections\"}\r\n        context={context}\r\n        setContext={setContext}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"outerbox\">\r\n        <Navbar />\r\n        <Search />\r\n      </div>\r\n      {ifSearch()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Collections;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\HeroSheet.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\data\\worldstate.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\WorldSheet.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\utils\\exports.js",["274","275"],"import architecture from \"../data/architecture.json\";\r\n\r\n/*\r\n1. Utility\r\n2. Combat\r\n3. Tests\r\n4. Status\r\n*/\r\n\r\n/*\r\n------------------------------------------------------------------\r\n  UTILITY\r\n------------------------------------------------------------------\r\n*/\r\n\r\nconst r = function (c) {\r\n  return Math.floor(Math.random() * c);\r\n};\r\n\r\nconst s = function (array) {\r\n  return array[r(array.length)];\r\n};\r\n\r\nconst multiRoll = (value) => {\r\n  let total = 0;\r\n  let ifexploding = value.slice(-1);\r\n  if (ifexploding === \"*\") {\r\n    value = value.slice(0, -1);\r\n  }\r\n  let dice = value.split(\"d\");\r\n  let times = parseInt(dice[0]);\r\n  let size = parseInt(dice[1]);\r\n  for (let i = 0; i < times; i++) {\r\n    let subtotal = 0;\r\n    let result = r(size) + 1;\r\n    subtotal += result;\r\n    if (result === size && ifexploding === \"*\") {\r\n      console.log(\"BOOM\");\r\n      while (true) {\r\n        let newresult = r(size) + 1;\r\n        subtotal += newresult;\r\n        if (newresult !== size) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    total += subtotal;\r\n  }\r\n  return total;\r\n};\r\n\r\nconst updateState = (object, method, property, value) => {\r\n  let object2 = object;\r\n  object2[property] = value;\r\n  method(JSON.parse(JSON.stringify(object2)));\r\n};\r\n\r\nconst toggleState = (object, method, property, value, togglevalue) => {\r\n  if (object[property] === value) {\r\n    updateState(object, method, property, togglevalue);\r\n  } else {\r\n    updateState(object, method, property, value);\r\n  }\r\n};\r\n\r\nconst toggle = (method, status) => {\r\n  method(!status);\r\n};\r\n\r\n/*\r\n------------------------------------------------------------------\r\n  COMBAT\r\n------------------------------------------------------------------\r\n*/\r\n\r\nconst rdamage = (string) => {\r\n  let split = string.split(\"d\");\r\n\r\n  let base = r(split[split.length - 1]) + 1;\r\n  let nug = split.pop();\r\n  if (split.length > 1) {\r\n    base = base * r(split[split.length - 1]) + 1;\r\n  } else {\r\n    base = base * split[split.length - 1];\r\n  }\r\n  nug = split.pop();\r\n  if (split.length > 0) {\r\n    base = base * split[split.length - 1];\r\n  }\r\n\r\n  return base;\r\n};\r\n\r\nconst damage = (string) => {\r\n  let exploding = false;\r\n  let explosions = 0;\r\n  if (string.substr(string.length - 1) === \"*\") {\r\n    exploding = true;\r\n    string = string.slice(0, -1);\r\n  }\r\n  let total = 0;\r\n  let dice = string.split(\"d\");\r\n  let times = parseInt(dice[0]);\r\n  let size = parseInt(dice[1]);\r\n  for (let i = 0; i < times; i++) {\r\n    let subtotal = 0;\r\n    let result = r(size) + 1;\r\n    subtotal += result;\r\n    //exploding dice\r\n    if (result === size && exploding === true) {\r\n      console.log(\"BOOM\");\r\n      while (true) {\r\n        explosions += 1;\r\n        let newresult = r(size) + 1;\r\n        subtotal += newresult;\r\n        if (newresult !== size) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    total += subtotal;\r\n  }\r\n  return { total: total, explosions: explosions };\r\n};\r\n\r\nconst damagecalc = (string, adv) => {\r\n  let result1;\r\n  let result2;\r\n  if (adv !== \"\") {\r\n    result1 = damage(string);\r\n    result2 = damage(string);\r\n  } else {\r\n    result1 = damage(string);\r\n  }\r\n\r\n  if (adv === \"+\") {\r\n    if (result1.total > result2.total) {\r\n      return result1;\r\n    }\r\n    return result2;\r\n  }\r\n  if (adv === \"-\") {\r\n    if (result1.total < result2.total) {\r\n      return result1;\r\n    }\r\n    return result2;\r\n  }\r\n  return result1;\r\n};\r\n\r\n/*\r\n------------------------------------------------------------------\r\n  TESTS\r\n------------------------------------------------------------------\r\n*/\r\n\r\nconst calcSale = (value) => {\r\n  let valuesplit = value.split(\"x\");\r\n  let roll = multiRoll(valuesplit[0]);\r\n  return roll * parseInt(valuesplit[1]);\r\n};\r\n\r\nconst minitest = (pro, stat) => {\r\n  return r(20) + pro + stat;\r\n};\r\n\r\nconst roll = (adv, pro) => {\r\n  let result = 0;\r\n  let total = 0;\r\n  let text = \"\";\r\n  if (adv === \"+\") {\r\n    let roll1 = r(20) + 1;\r\n    let roll2 = r(20) + 1;\r\n    result = Math.max(roll1, roll2);\r\n    text = \"Results: \" + roll1 + \", \" + roll2;\r\n  } else if (adv === \"-\") {\r\n    let roll1 = r(20) + 1;\r\n    let roll2 = r(20) + 1;\r\n    result = Math.min(roll1, roll2);\r\n    text = \"Results: \" + roll1 + \", \" + roll2;\r\n  } else {\r\n    result = r(20) + 1;\r\n    text = \"Result: \" + result;\r\n  }\r\n  if (pro !== 0) {\r\n    total = result + pro;\r\n  } else {\r\n    total = result;\r\n  }\r\n  return { result: result, total: total, text: text };\r\n};\r\n\r\nconst adjudicate = (rollData) => {\r\n  let { rollResult, rollTotal, target, text } = rollData;\r\n  let resultString = \"\";\r\n  if (rollResult === 20 || rollResult === 1) {\r\n    resultString += \"Critical \";\r\n  }\r\n  if (rollTotal === target) {\r\n    resultString += \"Barely a \";\r\n  }\r\n  if (rollTotal >= target) {\r\n    resultString += \"Success\";\r\n  } else {\r\n    resultString += \"Failure\";\r\n  }\r\n  if (rollResult === 7 && rollTotal <= target) {\r\n    resultString += \" with a Silver Lining\";\r\n  }\r\n  if (rollResult === 13 && rollTotal >= target) {\r\n    resultString += \" with a Drawback\";\r\n  }\r\n\r\n  resultString += \"! \" + text + \". Total: \" + rollTotal + \".\";\r\n  return resultString;\r\n};\r\n\r\nconst test = (target, adv, pro, mod) => {\r\n  let rollInfo = roll(adv, pro);\r\n  let rollResult = rollInfo.result;\r\n  let rollTotal = parseInt(rollInfo.total) + parseInt(mod);\r\n  let rollData = {\r\n    rollResult: rollResult,\r\n    rollTotal: rollTotal,\r\n    target: target,\r\n    text: rollInfo.text,\r\n  };\r\n  let resultString = adjudicate(rollData);\r\n  return { resultString: resultString, rollData: rollData };\r\n};\r\n\r\nconst haggleRoll = (result, mode) => {\r\n  let multiplier = 1;\r\n  let add = (result - 15) * 0.05;\r\n  if (mode === \"none\") {\r\n    //buying\r\n    multiplier -= add;\r\n  }\r\n  if (mode === \"items\") {\r\n    //selling\r\n    multiplier += add;\r\n  }\r\n  return multiplier;\r\n};\r\n\r\n/*\r\n------------------------------------------------------------------\r\n  STATUS\r\n------------------------------------------------------------------\r\n*/\r\n\r\nconst withProAdv = (object) => {\r\n  let string = \"\";\r\n  let mod = \"\";\r\n  if (object.pro !== undefined) {\r\n    if (object.pro !== \"\" || object.adv !== \"\") {\r\n      string += \" with \";\r\n    }\r\n    if (object.pro === \"single\") {\r\n      string += \"Proficiency\";\r\n    }\r\n    if (object.pro === \"double\") {\r\n      string += \"Double Proficiency\";\r\n    }\r\n    if (object.pro !== \"\" && object.adv !== \"\") {\r\n      string += \" and \";\r\n    }\r\n  } else if (object.adv !== \"\") {\r\n    string += \" with \";\r\n  }\r\n  if (object.adv === \"+\") {\r\n    string += \"Advantage\";\r\n    mod = \" [+]\";\r\n  }\r\n  if (object.adv === \"-\") {\r\n    string += \"Disadvantage\";\r\n    mod = \" [-]\";\r\n  }\r\n  return { string: string, mod: mod };\r\n};\r\n\r\nconst invcalc = (encumbrance, placement, placement2) => {\r\n  return encumbrance.toString().slice(placement, placement2);\r\n};\r\n\r\nconst sackstonesoap = (weight, mode) => {\r\n  let encumbrance = weight;\r\n  let soaps = invcalc(encumbrance, -1);\r\n  let stones = invcalc(encumbrance, -2, -1);\r\n  let sacks = invcalc(encumbrance, -3, -2);\r\n  let array = [\r\n    { amount: sacks, name: \"Sacks\" },\r\n    { amount: stones, name: \"Stones\" },\r\n    { amount: soaps, name: \"Soaps\" },\r\n  ];\r\n  let sackstonesoap = \"\";\r\n  for (let i = 0; i < array.length; i++) {\r\n    let element = array[i];\r\n    let amount = parseInt(element.amount);\r\n    if (amount === 0 || amount === \"\" || amount !== amount) {\r\n      if (mode === \"inventory\") {\r\n        sackstonesoap += \" 0 \" + element.name;\r\n        if (i !== array.length - 1) {\r\n          sackstonesoap += \", \";\r\n        }\r\n      }\r\n    } else {\r\n      sackstonesoap += element.amount + \" \" + element.name;\r\n      if (i < array.length - 1) {\r\n        if (parseInt(array[i + 1].amount) !== 0) {\r\n          sackstonesoap += \", \";\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return sackstonesoap;\r\n};\r\n\r\nconst messageStats = (stat) => {\r\n  return (\r\n    <span>\r\n      {stat.map((eachstat, index) => {\r\n        return (\r\n          <span key={index}>\r\n            <i>{architecture.statMasks[eachstat]}</i>\r\n            {index < 0 && index > stat.length && <span> or </span>}\r\n          </span>\r\n        );\r\n      })}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport {\r\n  r,\r\n  s,\r\n  rdamage,\r\n  multiRoll,\r\n  damagecalc,\r\n  calcSale,\r\n  roll,\r\n  minitest,\r\n  adjudicate,\r\n  test,\r\n  haggleRoll,\r\n  sackstonesoap,\r\n  updateState,\r\n  toggleState,\r\n  toggle,\r\n  withProAdv,\r\n  messageStats,\r\n};\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\SlotName.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\SaveModal.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\ExportModal.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\CardScene.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\CardEnvironment.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\SaveCard.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\ImportCard.js",["276"],"import React, { useState, useContext } from \"react\";\r\nimport Name from \"../bits/Name\";\r\nimport Description from \"../bits/Description\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { FaFileUpload } from \"react-icons/fa\";\r\nimport Character from \"../../data/character.js\";\r\n\r\nconst ImportCard = (props) => {\r\n  const [expanded, setExpanded] = useState(false);\r\n  const [character, setCharacter] = useContext(Character);\r\n  const [importData, setImportData] = useState(\"\");\r\n\r\n  const expandCollapse = (status) => {\r\n    setExpanded(!status);\r\n  };\r\n\r\n  const { name, description } = props;\r\n\r\n  const importJson = (string) => {\r\n    setCharacter(JSON.parse(string));\r\n  };\r\n\r\n  return (\r\n    <Col>\r\n      <article className=\"outerbox\">\r\n        <div className=\"row\">\r\n          <Name\r\n            name={name}\r\n            expanded={expanded}\r\n            expandCollapse={expandCollapse}\r\n          />\r\n          <FaFileUpload\r\n            className=\"rightfloat icon mright24px mtop12px\"\r\n            onClick={() => {\r\n              expandCollapse(expanded);\r\n            }}\r\n          />\r\n        </div>\r\n        {expanded === true && (\r\n          <span>\r\n            <hr></hr>\r\n            <Description description={description} />\r\n            <hr></hr>\r\n            <textarea\r\n              className=\"textarea\"\r\n              name=\"importChar\"\r\n              id=\"importChar\"\r\n              cols=\"40\"\r\n              rows=\"5\"\r\n              onChange={(e) => setImportData(e.target.value)}\r\n            ></textarea>\r\n            <button\r\n              className=\"button bordered padded5px fullwidth\"\r\n              onClick={() => {\r\n                importJson(importData);\r\n              }}\r\n            >\r\n              Import\r\n            </button>\r\n          </span>\r\n        )}\r\n      </article>\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default ImportCard;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\ExportCard.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\StatSheet.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\RandomCharModal.js",["277"],"import React, { useContext, useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { FaDiceD20 } from \"react-icons/fa\";\r\nimport Character from \"../../data/character.js\";\r\nimport { s, r } from \"../../utils/exports.js\";\r\nimport architecture from \"../../data/architecture.json\";\r\nimport RandomCharCard from \"./RandomCharCard.js\";\r\nlet contextData = require(`../../data/orders.json`);\r\n\r\nconst RandomCharModal = () => {\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [character, setCharacter] = useContext(Character);\r\n\r\n  const modalOpening = () => {\r\n    setModalOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setModalOpen(false);\r\n  };\r\n\r\n  const charLevels = architecture.charLevels;\r\n  const charTypes = architecture.charTypes;\r\n\r\n  const ifListIncludes = (array, target) => {\r\n    //console.log(array);\r\n    //console.log(target);\r\n    for (let element of array) {\r\n      //console.log(element.name);\r\n      if (element.name === target.name) return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const addCard = (collection, data, newchar) => {\r\n    let selectionName = s(contextData[collection]);\r\n    let selection = data[selectionName];\r\n    let selectionObject = { name: selectionName, savedrank: 0 };\r\n    if (selection.table !== undefined) {\r\n      selectionObject.savedresult = r(selection.table.length);\r\n    }\r\n    //below adds rank to card instead of adding duplicate\r\n    if (\r\n      ifListIncludes(newchar[collection], selectionObject) &&\r\n      collection !== \"items\"\r\n    ) {\r\n      console.log(\"duplicate\");\r\n      if (selection.ranks.length > 1) {\r\n        for (let card in newchar[collection]) {\r\n          if (card.name === selection.name) {\r\n            card.savedrank += 1;\r\n          }\r\n        }\r\n      } else {\r\n        let newSelectionName = s(contextData[collection]);\r\n        let newSelection = data[newSelectionName];\r\n        let newSelectionObject = { name: selectionName, savedrank: 0 };\r\n        if (newSelection.table !== undefined) {\r\n          newSelectionObject.savedresult = r(newSelection.table.length);\r\n        }\r\n        //makeshift solution for now, might need while statement\r\n        newchar[collection].push(newSelectionObject);\r\n      }\r\n    } else {\r\n      newchar[collection].push(selectionObject);\r\n    }\r\n  };\r\n\r\n  const charGen = (heroType) => {\r\n    let levels = charLevels[heroType];\r\n    let newchar = {};\r\n    let collections = [\"skills\", \"traits\", \"items\", \"spells\", \"creatures\"];\r\n    let attributes = architecture.attributeArray;\r\n    let saves = [\"ha\", \"ka\", \"ba\"];\r\n    let otherstats = [\r\n      \"level\",\r\n      \"PRO\",\r\n      \"actions\",\r\n      \"MCOST\",\r\n      \"life\",\r\n      \"maxlife\",\r\n      \"HERODICE\",\r\n      \"XP\",\r\n      \"CASH\",\r\n    ];\r\n\r\n    for (let collection of collections) {\r\n      newchar[collection] = [];\r\n      for (let i = 0; i < levels[collection]; i++) {\r\n        let data = require(`../../data/collections/` + collection);\r\n        //modifier that adds increased chance of increasing a card rank instead of adding new card\r\n        //based on how high levels[collection] is\r\n        if (\r\n          (collection === \"skills\" || collection === \"traits\") &&\r\n          r(levels[collection]) > 1 &&\r\n          newchar[collection].length > 0\r\n        ) {\r\n          console.log(\"bleb\");\r\n          let i = 0;\r\n          while (true) {\r\n            let card = newchar[collection][r(newchar[collection].length - 1)];\r\n            let cardObject = data[card.name];\r\n            if (!cardObject.ranks || cardObject.ranks.length === 1) {\r\n              addCard(collection, data, newchar);\r\n              break;\r\n            }\r\n            if (card.savedrank < cardObject.ranks.length - 1) {\r\n              card.savedrank += 1;\r\n              break;\r\n            }\r\n            if (i > 30) {\r\n              break;\r\n            }\r\n            i++;\r\n          }\r\n        } else {\r\n          addCard(collection, data, newchar);\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let attribute of attributes) {\r\n      newchar[attribute] = 0;\r\n    }\r\n\r\n    for (let i = 0; i < levels.stats; i++) {\r\n      let attribute = s(attributes);\r\n      //add stat limit?\r\n      newchar[attribute]++;\r\n    }\r\n\r\n    for (let save of saves) {\r\n      newchar[save] = 0;\r\n    }\r\n\r\n    for (let otherstat of otherstats) {\r\n      newchar[otherstat] = levels[otherstat];\r\n    }\r\n\r\n    //if (gear == \"true\") { give hero an item each marked \"armor\" or \"clothes\", \"weapon\" }\r\n\r\n    newchar.name = \"Novelus Charactericus\";\r\n    newchar.type = levels.name;\r\n\r\n    setCharacter(newchar);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FaDiceD20\r\n        className=\"icon mtop10px\"\r\n        onClick={() => {\r\n          modalOpening();\r\n        }}\r\n      />\r\n      <Modal show={modalOpen} onHide={closeModal}>\r\n        <Modal.Header className=\"modalbackground\">\r\n          Generate Random Hero\r\n        </Modal.Header>\r\n        <Modal.Body className=\"modalbackground\">\r\n          {charTypes.map((type, index) => {\r\n            return (\r\n              <RandomCharCard\r\n                key={index}\r\n                name={type.name}\r\n                flavor={type.flavor}\r\n                description={type.description}\r\n                stats={type.stats}\r\n                buttonname={\"Generate\"}\r\n                buttonprop={type.value}\r\n                buttonfunction={charGen}\r\n              />\r\n            );\r\n          })}\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\nexport default RandomCharModal;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\CardList.js",["278","279"],"import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport CardItem from \"./CardItem\";\r\nimport CardSpell from \"./CardSpell\";\r\nimport CardCreature from \"./CardCreature\";\r\nimport CardEnvironment from \"./CardEnvironment\";\r\nimport CardProp from \"./CardProp\";\r\nimport CardScene from \"./CardScene\";\r\nimport Col from \"react-bootstrap/Row\";\r\n\r\nconst CardList = (props) => {\r\n\r\n  const pageChange = (value) => {\r\n    if (props.context.page + value < 0) return;\r\n    if ((props.context.page + value) * 30 > props.content.length) return;\r\n    let newContext = props.context;\r\n    newContext.page += value;\r\n    props.setContext(JSON.parse(JSON.stringify(newContext)));\r\n  }\r\n\r\n  const ifCard = (card, placement) => {\r\n    let cardObject;\r\n    if (typeof card === \"object\") {\r\n      cardObject = card;\r\n    } else {\r\n      cardObject = { name: card, savedrank: 0 };\r\n    }\r\n    if (props.category === \"items\") {\r\n      return (\r\n        <CardItem\r\n          context={props.mode}\r\n          key={placement}\r\n          card={cardObject}\r\n          form={props.form}\r\n          placement={placement}\r\n          deleteFrom={props.deleteFrom}\r\n          category={props.category}\r\n        />\r\n      );\r\n    }\r\n    if (props.category === \"spells\") {\r\n      return (\r\n        <CardSpell\r\n          context={props.mode}\r\n          key={placement}\r\n          card={cardObject}\r\n          form={props.form}\r\n          placement={placement}\r\n          deleteFrom={props.deleteFrom}\r\n          category={props.category}\r\n        />\r\n      );\r\n    }\r\n    if (props.category === \"creatures\") {\r\n      return (\r\n        <CardCreature\r\n          context={props.mode}\r\n          key={placement}\r\n          card={cardObject}\r\n          form={props.form}\r\n          placement={placement}\r\n          deleteFrom={props.deleteFrom}\r\n          category={props.category}\r\n        />\r\n      );\r\n    }\r\n    if (props.category === \"environments\") {\r\n      return (\r\n        <CardEnvironment\r\n          context={props.mode}\r\n          key={placement}\r\n          card={cardObject}\r\n          form={props.form}\r\n          placement={placement}\r\n          deleteFrom={props.deleteFrom}\r\n          category={props.category}\r\n        />\r\n      );\r\n    }\r\n    if (props.category === \"scenes\") {\r\n      return (\r\n        <CardScene\r\n          context={props.mode}\r\n          key={placement}\r\n          card={cardObject}\r\n          form={props.form}\r\n          placement={placement}\r\n          deleteFrom={props.deleteFrom}\r\n          category={props.category}\r\n        />\r\n      );\r\n    }\r\n    if (props.category === \"props\") {\r\n      return (\r\n        <CardProp\r\n          context={props.mode}\r\n          key={placement}\r\n          card={cardObject}\r\n          form={props.form}\r\n          placement={placement}\r\n          deleteFrom={props.deleteFrom}\r\n          category={props.category}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <Card\r\n        context={props.mode}\r\n        key={placement}\r\n        card={cardObject}\r\n        form={props.form}\r\n        placement={placement}\r\n        deleteFrom={props.deleteFrom}\r\n        category={props.category}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {props.mode === \"collections\" && <div>\r\n        <button className=\"button bordered mleft12px\" onClick={() => {pageChange(-1)}}>{\"<\"}</button>\r\n        <span className=\"button bordered padded2px\"> {props.context.page} </span>\r\n        <button className=\"button bordered\" onClick={() => {pageChange(1)}}>{\">\"}</button>\r\n      </div>}\r\n      \r\n      {props.deleteFrom !== \"none\" && (\r\n        <div>\r\n          {props.content.map((card, index) => {\r\n            if (props.mode === \"character\") return ifCard(card, index);\r\n            if (index >= props.context.page * 30 && index < (props.context.page + 1) * 30) {\r\n              return ifCard(card, index);\r\n            }\r\n          })}\r\n        </div>\r\n      )}\r\n      {props.deleteFrom === \"none\" && (\r\n        <Col>\r\n          {props.content.map((card, index) => {\r\n            if (props.mode === \"character\") return ifCard(card, index);\r\n            if (index >= props.context.page * 30 && index < (props.context.page + 1) * 30) {\r\n              return ifCard(card, index);\r\n            }\r\n          })}\r\n        </Col>\r\n      )}\r\n      {props.mode === \"collections\" && <div>\r\n        <button className=\"button bordered mleft12px\" onClick={() => {pageChange(-1)}}>{\"<\"}</button>\r\n        <span className=\"button bordered padded2px\"> {props.context.page} </span>\r\n        <button className=\"button bordered\" onClick={() => {pageChange(1)}}>{\">\"}</button>\r\n      </div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\Attributes.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\Defenses.js",["280"],"import React, { useState, useContext } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { r } from \"../../utils/exports\";\r\nimport Character from \"../../data/character.js\";\r\nimport { FaRegEdit } from \"react-icons/fa\";\r\nimport Defense from \"./Defense.js\";\r\nimport architecture from \"../../data/architecture.json\";\r\n\r\nconst Defenses = () => {\r\n  const [character] = useContext(Character);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [modalStat, setModalStat] = useState(\"ha\");\r\n  const [result, setResult] = useState(\"\");\r\n  const [edit, setEdit] = useState(false);\r\n  const [currentStat, setCurrentStat] = useState(character[modalStat]);\r\n\r\n  const defenses = architecture.defenses;\r\n  const statMasks = architecture.statMasks;\r\n\r\n  const deforder = [\"ha\", \"ka\", \"ba\"];\r\n\r\n  const bonuses = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [9, 10],\r\n  ];\r\n\r\n  const calcDefense = (defense) => {\r\n    let substats = defense.substats;\r\n    let total = 0;\r\n    total += Math.max(character[substats[0]], character[substats[1]]);\r\n    total += character.PRO;\r\n    total += character[defense.name];\r\n    let cards = require(`../../data/collections/items`);\r\n\r\n    //for (let item of character.items) {\r\n    for (let item of character.items) {\r\n      let CardItem = cards[item.name];\r\n      if (!CardItem.stat) return;\r\n      for (let i = 0; i < CardItem.stat.length; i++) {\r\n        if (CardItem.stat[i] === defense.name && item.worn === true) {\r\n          total += parseInt(CardItem.number[i]);\r\n        }\r\n      }\r\n    }\r\n    //}\r\n    if (defense.name === \"ba\") {\r\n      total += Math.round(character.CASH / 250);\r\n    }\r\n    return total;\r\n  };\r\n\r\n  const modalOpenStat = (stat) => {\r\n    setResult(() => {\r\n      return \"\";\r\n    });\r\n    setModalOpen(true);\r\n    setModalStat(stat);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setModalOpen(false);\r\n  };\r\n\r\n  const editToggle = (status) => {\r\n    setEdit(!status);\r\n  };\r\n\r\n  const editStat = (amount, stat) => {\r\n    character[stat] += parseInt(amount);\r\n    setCurrentStat(character[stat]);\r\n  };\r\n\r\n  const save = (modifier) => {\r\n    let rollResult = r(20) + 1;\r\n    let total = rollResult + modifier;\r\n    if (total <= calcDefense(defenses[modalStat])) {\r\n      return `Success! Result: ${rollResult}. Total: ${total}.`;\r\n    } else {\r\n      return `Failure! Result: ${rollResult}. Total: ${total}.`;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"outerbox\">\r\n      <div className=\"row mleft5px\">DEFENSES</div>\r\n      <div className=\"padded5px mleft5px flex\">\r\n        {deforder.map((defense, index) => {\r\n          return (\r\n            <button\r\n              className=\"button bordered padded5px margin5px flexgrow fontsize\"\r\n              key={index}\r\n              onClick={() => {\r\n                modalOpenStat(defenses[defense].name);\r\n                setEdit(false);\r\n              }}\r\n            >\r\n              <Defense defense={defenses[defense]} />\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n      <Modal show={modalOpen} onHide={closeModal}>\r\n        <Modal.Header className=\"modalbackground\">\r\n          <span className=\"cardname center\">\r\n            {edit === true && <span className=\"cardname\">Edit</span>}\r\n            <i>{statMasks[modalStat]}</i> save: (\r\n            {calcDefense(defenses[modalStat])})\r\n          </span>\r\n          <span>\r\n            <FaRegEdit\r\n              className=\"icon rightfloat\"\r\n              onClick={() => {\r\n                editToggle(edit);\r\n              }}\r\n            ></FaRegEdit>\r\n          </span>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"modalbackground\">\r\n          {edit === true && (\r\n            //flex these\r\n            <div>\r\n              <div className=\"outerbox\">\r\n                <div className=\"flex\">\r\n                  <button\r\n                    className=\"button bordered padded5px margin5px flexgrow\"\r\n                    onClick={() => {\r\n                      editStat(-1, modalStat);\r\n                    }}\r\n                  >\r\n                    -1\r\n                  </button>\r\n                  <button\r\n                    className=\"button bordered padded5px margin5px flexgrow\"\r\n                    onClick={() => {\r\n                      editStat(+1, modalStat);\r\n                    }}\r\n                  >\r\n                    +1\r\n                  </button>\r\n                </div>\r\n                <div className=\"flex\">\r\n                  <button\r\n                    className=\"button bordered padded5px margin5px fullwidth\"\r\n                    onClick={() => {\r\n                      editToggle(edit);\r\n                    }}\r\n                  >\r\n                    Done\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <hr></hr>\r\n            </div>\r\n          )}\r\n          {edit === false && (\r\n            <div>\r\n              <div>\r\n                {bonuses.map((bonusrow, index) => {\r\n                  return (\r\n                    <div className=\"flex\" key={index}>\r\n                      {bonusrow.map((bonus, index) => {\r\n                        return (\r\n                          <button\r\n                            className=\"button bordered padded5px margin5px flexgrow\"\r\n                            key={index}\r\n                            onClick={() => {\r\n                              setResult(save(bonus));\r\n                            }}\r\n                          >\r\n                            +{bonus}\r\n                          </button>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n              <hr></hr>\r\n              <div\r\n                className=\"center button\"\r\n                onClick={() => {\r\n                  navigator.clipboard.writeText(\r\n                    character.name +\r\n                      \" makes a \" +\r\n                      architecture.statMasks[modalStat] +\r\n                      \" save!\\nThe save is a \" +\r\n                      result\r\n                  );\r\n                }}\r\n              >\r\n                {result}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Defenses;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\RandomCharCard.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\Stats.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\Resources.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\CardSpell.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\CardProp.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\Card.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\CardCreature.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\CardItem.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\RollCard.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\Defense.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\ModalSpellCast.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\ModalItemSale.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\ModalCreatureEdit.js",[],["281","282"],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\ModalItemAttack.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\ModalLifeEdit.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\ModalCreatureAttack.js",["283"],"import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport architecture from \"../../data/architecture.json\";\r\nimport NameValuePair from \"../bits/NameValuePair.js\";\r\nimport toaster from \"toasted-notes\";\r\nimport {\r\n  r,\r\n  test,\r\n  damagecalc,\r\n  toggleState,\r\n  toggle,\r\n  withProAdv,\r\n} from \"../../utils/exports.js\";\r\n\r\nfunction ModalCreatureAttack(props) {\r\n  const [target, setTarget] = useState(10);\r\n  const [attackResult, setAttackResult] = useState(\"\");\r\n  const [attackMessage, setAttackMessage] = useState(\"\");\r\n  const [attack, setAttack] = useState({ adv: \"\" });\r\n  const [damage, setDamage] = useState({ adv: \"\" });\r\n\r\n  const {\r\n    attackModalOpen,\r\n    setAttackModalOpen,\r\n    creatureName,\r\n    attackName,\r\n    attackBonus,\r\n    attackDamage,\r\n    attackStat,\r\n    creatureProperties,\r\n  } = props;\r\n\r\n  const modularString = (object) => {\r\n    let data = withProAdv(object);\r\n    return (\r\n      <span>\r\n        {data.string} {data.mod}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const confirmAttack = () => {\r\n    let pro = 0;\r\n\r\n    let attackResult = test(target, attack.adv, pro, attackBonus);\r\n    let attackText = attackResult.resultString;\r\n    let damageResult = damagecalc(attackDamage, damage.adv);\r\n\r\n    if (attackText.startsWith(\"Critical S\")) {\r\n      damageResult.total = damageResult.total * 2;\r\n      let critRoll = r(20) + 1;\r\n      if (critRoll === \"20\") {\r\n        damageResult.total = damageResult.total * 2;\r\n        attackText.concat(\"Double \", attackText);\r\n      }\r\n    }\r\n    if (\r\n      attackText.startsWith(\"S\") ||\r\n      attackText.startsWith(\"B\") ||\r\n      attackText.startsWith(\"Critical S\")\r\n    ) {\r\n      setAttackResult(\r\n        <div>\r\n          {attackText} <br /> {damageResult.total} {attackStat} damage dealt!{\" \"}\r\n          {damageResult.explosions !== 0 && (\r\n            <span>(Explosions: {damageResult.explosions})</span>\r\n          )}\r\n        </div>\r\n      );\r\n      let damageAdv = \"\";\r\n      if (damage.adv === \"+\") {\r\n        damageAdv = \" [+] \";\r\n      }\r\n      if (damage.adv === \"-\") {\r\n        damageAdv = \" [-] \";\r\n      }\r\n      let message = `${creatureName} attacks using their ${attackName} ${\r\n        withProAdv(attack).string\r\n      }!\\nThe attack is a ${attackText}\\n${\r\n        damageResult.total\r\n      } ${attackStat} damage ${damageAdv} dealt!`;\r\n      setAttackMessage(message);\r\n    } else {\r\n      let message = `${creatureName} attacks using their ${attackName}${\r\n        withProAdv(attack).string\r\n      }!\\nThe attack is a ${attackText}`;\r\n      setAttackResult(attackText);\r\n      setAttackMessage(message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={attackModalOpen}\r\n      onHide={() => {\r\n        toggle(setAttackModalOpen, attackModalOpen);\r\n      }}\r\n    >\r\n      <Modal.Header className=\"modalbackground\">\r\n        <span className=\"cardname\">Attack using {attackName}!</span>\r\n      </Modal.Header>\r\n      <Modal.Body className=\"modalbackground\">\r\n        <div>Attacker: {creatureName}</div>\r\n        <hr />\r\n        {creatureProperties.map((property, index) => {\r\n          if (property.of !== attackName) return;\r\n          return (\r\n            <div key={index}>\r\n              <NameValuePair\r\n                name={property.name}\r\n                value={property.description}\r\n              />\r\n              <hr />\r\n            </div>\r\n          );\r\n        })}\r\n        <div>\r\n          Attack Bonus{modularString(attack)}: {attackBonus}\r\n        </div>\r\n        <div className=\"flex\">\r\n          <button\r\n            className=\"button bordered padded5px margin5px flexgrow\"\r\n            onClick={() => {\r\n              toggleState(attack, setAttack, \"adv\", \"\", \"-\");\r\n            }}\r\n          >\r\n            [-]\r\n          </button>\r\n          <button\r\n            className=\"button bordered padded5px margin5px flexgrow\"\r\n            onClick={() => {\r\n              toggleState(attack, setAttack, \"adv\", \"\", \"+\");\r\n            }}\r\n          >\r\n            [+]\r\n          </button>\r\n        </div>\r\n        <hr />\r\n        <div>\r\n          Damage{modularString(damage)}: {attackDamage}\r\n        </div>\r\n        <div className=\"flex\">\r\n          <button\r\n            className=\"button bordered padded5px margin5px flexgrow\"\r\n            onClick={() => {\r\n              toggleState(damage, setDamage, \"adv\", \"\", \"-\");\r\n            }}\r\n          >\r\n            [-]\r\n          </button>\r\n          <button\r\n            className=\"button bordered padded5px margin5px flexgrow\"\r\n            onClick={() => {\r\n              toggleState(damage, setDamage, \"adv\", \"\", \"+\");\r\n            }}\r\n          >\r\n            [+]\r\n          </button>\r\n        </div>\r\n        <hr />\r\n        <div>\r\n          Target {architecture.statMasks[attackStat]}: {target}\r\n        </div>\r\n        <div className=\"flex\">\r\n          <button\r\n            className=\"button bordered padded5px margin5px flexgrow\"\r\n            onClick={() => {\r\n              setTarget(target - 1);\r\n            }}\r\n          >\r\n            -1\r\n          </button>\r\n          <button\r\n            className=\"button bordered padded5px margin5px flexgrow\"\r\n            onClick={() => {\r\n              setTarget(target + 1);\r\n            }}\r\n          >\r\n            +1\r\n          </button>\r\n        </div>\r\n        <hr />\r\n        <div className=\"flex\">\r\n          <button\r\n            className=\"button bordered padded5px margin5px flexgrow\"\r\n            onClick={() => {\r\n              confirmAttack();\r\n            }}\r\n          >\r\n            Confirm Attack\r\n          </button>\r\n        </div>\r\n        {attackResult !== \"\" && (\r\n          <div>\r\n            <hr />\r\n            <div\r\n              className=\"button padded5px\"\r\n              onClick={() => {\r\n                toaster.notify(\r\n                  () => (\r\n                    <div className=\"outerbox modalbackground\">\r\n                      {\"Attack text copied to clipboard!\"}\r\n                    </div>\r\n                  ),\r\n                  {\r\n                    duration: 1000,\r\n                  }\r\n                );\r\n                navigator.clipboard.writeText(attackMessage);\r\n              }}\r\n            >\r\n              {attackResult}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default ModalCreatureAttack;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\Stat.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\SpellCostCard.js",["284"],"import React, { useState, useContext } from \"react\";\r\nimport Name from \"../bits/Name\";\r\nimport NameValuePair from \"../bits/NameValuePair\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { FaChevronLeft, FaChevronRight } from \"react-icons/fa\";\r\nimport Character from \"../../data/character.js\";\r\nimport toaster from \"toasted-notes\";\r\n\r\nconst ExportCard = (props) => {\r\n  const { name, rank, modulate } = props;\r\n\r\n  const [castText, setCastText] = useState(\"\");\r\n  const [character, setCharacter] = useContext(Character);\r\n\r\n  let totalCost = rank.power * character.MCOST;\r\n\r\n  const cast = () => {\r\n    let newchar = character;\r\n    newchar.life -= totalCost;\r\n    setCharacter(JSON.parse(JSON.stringify(newchar)));\r\n    setCastText(\r\n      `${character.name} cast ${name} at base cost ${rank.power} for a total cost of ${totalCost} life!`\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n        <div className=\"row\">\r\n          <Name name={\"Life Cost: \" + totalCost} />\r\n          <button\r\n            className=\"button bordered padded2px\"\r\n            onClick={() => {\r\n              modulate(-1);\r\n              setCastText(\"\");\r\n            }}\r\n          >\r\n            <FaChevronLeft className=\"pbottom5px\" />\r\n          </button>\r\n          <button\r\n            className=\"button bordered padded2px\"\r\n            onClick={() => {\r\n              modulate(1);\r\n              setCastText(\"\");\r\n            }}\r\n          >\r\n            <FaChevronRight className=\"pbottom5px\" />\r\n          </button>\r\n        </div>\r\n        <div className=\"margin5px\">\r\n          <NameValuePair name={\"Current Life\"} value={character.life} />\r\n          <NameValuePair name={\"Base Cost\"} value={rank.power} />\r\n          <NameValuePair\r\n            name={\"Character Magic Cost\"}\r\n            value={character.MCOST}\r\n          />\r\n          <NameValuePair name={\"Effect\"} value={rank.effect} />\r\n        </div>\r\n        {totalCost >= character.life && (\r\n          <div className=\"outerbox\">\r\n            You don't have the life to cast this spell!\r\n          </div>\r\n        )}\r\n        {totalCost < character.life && (\r\n          <div\r\n            className=\"button bordered margin5px center\"\r\n            onClick={() => {\r\n              cast(totalCost);\r\n            }}\r\n          >\r\n            Cast Spell\r\n          </div>\r\n        )}\r\n      {castText !== \"\" && (\r\n        <div\r\n          className=\"button padded5px\"\r\n          onClick={() => {\r\n            toaster.notify(\r\n              () => (\r\n                <div className=\"outerbox modalbackground\">\r\n                  {\"Spell cast text copied to clipboard!\"}\r\n                </div>\r\n              ),\r\n              {\r\n                duration: 1000,\r\n              }\r\n            );\r\n            navigator.clipboard.writeText(castText);\r\n          }}\r\n        >\r\n          {castText}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExportCard;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\Search.js",["285","286","287"],"import React, { useContext, useState } from \"react\";\r\nimport Context from \"../../data/context\";\r\nimport { FaSearch } from \"react-icons/fa\";\r\nimport { s } from \"../../utils/exports.js\";\r\nimport orders from \"../../data/orders.json\";\r\n\r\nconst Search = () => {\r\n  const [context, setContext] = useContext(Context);\r\n  const [data, setData] = useState(\"Enter tag or name\");\r\n\r\n  const contextData = require(`../../data/collections/` + context.collections);\r\n\r\n  const submitSearch = () => {\r\n    let context2 = context;\r\n    if (context2.search === \"\") {\r\n      context2.search = data;\r\n    } else {\r\n      context2.search = context2.search + \"+\" + data;\r\n    }\r\n    setContext(() => {\r\n      return JSON.parse(JSON.stringify(context2));\r\n    });\r\n  };\r\n\r\n  const resetSearch = () => {\r\n    let context2 = context;\r\n    context2.search = \"\";\r\n    document.getElementById(\"searchbox\").value = \"\";\r\n    setData(() => {\r\n      return \"Enter tag or name\";\r\n    });\r\n    setContext(() => {\r\n      return JSON.parse(JSON.stringify(context2));\r\n    });\r\n  };\r\n\r\n  const filter = (filterBy) => {\r\n    let newData = [];\r\n    orders[context.collections].map((element) => {\r\n      let toFilter;\r\n      let elementFull = contextData[element];\r\n      if (typeof elementFull[filterBy] === \"string\") {\r\n        toFilter = elementFull[filterBy].toLowerCase();\r\n      } else {\r\n        toFilter = [];\r\n        elementFull[filterBy].map((item) => {\r\n          toFilter.push(item.toLowerCase());\r\n          return;\r\n        });\r\n      }\r\n      let searchSplit = context.search.toLowerCase().split(\"+\");\r\n      for (let searchTerm of searchSplit) {\r\n        if (!toFilter.includes(searchTerm)) {\r\n          return;\r\n        }\r\n      }\r\n      newData.push(element);\r\n      return;\r\n    });\r\n    return newData;\r\n  };\r\n\r\n  const randomResult = () => {\r\n    let resultpool;\r\n    let finalresult;\r\n\r\n    if (context.search === \"\") {\r\n      resultpool = orders[context.collections];\r\n    } else {\r\n      resultpool = filter(\"tags\");\r\n      if (resultpool.length === 0) {\r\n        resultpool = filter(\"name\");\r\n      }\r\n      if (resultpool.length === 1) {\r\n        resultpool = orders[context.collections];\r\n      }\r\n      if (resultpool.length === 0) {\r\n        let context2 = context;\r\n        context2.search = \"randomization error\";\r\n        setContext(() => {\r\n          return JSON.parse(JSON.stringify(context2));\r\n        });\r\n        return;\r\n      }\r\n    }\r\n    finalresult = s(resultpool);\r\n    let finalresultname = contextData[finalresult].name;\r\n    let context2 = context;\r\n    context2.search = finalresultname;\r\n    setContext(() => {\r\n      return JSON.parse(JSON.stringify(context2));\r\n    });\r\n  };\r\n\r\n  const defaultPlaceholder = () => {\r\n    if (context.search === \"\") {\r\n      return \"Enter tag or name\";\r\n    }\r\n    return context.search;\r\n  };\r\n\r\n  return (\r\n    <div className=\"row mleft5px fullwidth\">\r\n      <div className=\"flex fullwidth\">\r\n        <input\r\n          id=\"searchbox\"\r\n          className=\"button bordered link flexgrow2 pleft5px fontsize\"\r\n          placeholder={defaultPlaceholder()}\r\n          type=\"text\"\r\n          onChange={(e) => setData(e.target.value)}\r\n        />\r\n        <button\r\n          className=\"button bordered link searchbutton\"\r\n          onClick={submitSearch}\r\n          value=\"Search\"\r\n        >\r\n          <FaSearch />\r\n        </button>\r\n        <button\r\n          className=\"button bordered link searchbutton\"\r\n          onClick={resetSearch}\r\n        >\r\n          <b>C</b>\r\n        </button>\r\n        <button\r\n          className=\"button bordered link mright12px searchbutton\"\r\n          onClick={randomResult}\r\n        >\r\n          <b>R</b>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\navigation\\Navbar.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\navigation\\Navlet.js",["288"],"import React, { useContext } from \"react\";\r\nimport Context from \"../../data/context.js\";\r\nimport { ReactComponent as Items } from \"../../data/icons/items.svg\";\r\nimport { ReactComponent as Skills } from \"../../data/icons/skills.svg\";\r\nimport { ReactComponent as Traits } from \"../../data/icons/traits.svg\";\r\nimport { ReactComponent as Spells } from \"../../data/icons/magic.svg\";\r\nimport { ReactComponent as Creatures } from \"../../data/icons/creatures.svg\";\r\nimport { FaMask, FaTree, FaPuzzlePiece } from \"react-icons/fa\";\r\n\r\nconst Navlet = (props) => {\r\n  const [context, setContext] = useContext(Context);\r\n\r\n  const displayIcon = () => {\r\n    switch (props.navlet.name) {\r\n      case \"items\":\r\n        if (context.collections === props.navlet.name) {\r\n          return <Items className=\"iconsvgselected\" />;\r\n        }\r\n        return <Items className=\"iconsvg\" />;\r\n      case \"skills\":\r\n        if (context.collections === props.navlet.name) {\r\n          return <Skills className=\"iconsvgselected\" />;\r\n        }\r\n        return <Skills className=\"iconsvg\" />;\r\n      case \"traits\":\r\n        if (context.collections === props.navlet.name) {\r\n          return <Traits className=\"iconsvgselected\" />;\r\n        }\r\n        return <Traits className=\"iconsvg\" />;\r\n      case \"spells\":\r\n        if (context.collections === props.navlet.name) {\r\n          return <Spells className=\"iconsvgselected\" />;\r\n        }\r\n        return <Spells className=\"iconsvg\" />;\r\n      case \"creatures\":\r\n        if (context.collections === props.navlet.name) {\r\n          return <Creatures className=\"iconsvgselected\" />;\r\n        }\r\n        return <Creatures className=\"iconsvg\" />;\r\n      case \"environments\":\r\n        if (context.collections === props.navlet.name) {\r\n          return <FaTree className=\"iconsvg\" />;\r\n        }\r\n        return <FaTree className=\"iconsvg\" />;\r\n      case \"scenes\":\r\n        if (context.collections === props.navlet.name) {\r\n          return <FaMask className=\"iconsvg\" />;\r\n        }\r\n        return <FaMask className=\"iconsvg\" />;\r\n      case \"props\":\r\n        if (context.collections === props.navlet.name) {\r\n          return <FaPuzzlePiece className=\"iconsvg\" />;\r\n        }\r\n        return <FaPuzzlePiece className=\"iconsvg\" />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className={\r\n        context.collections === props.navlet.name\r\n          ? \"link button--selected bordered flexgrow\"\r\n          : \"link button bordered flexgrow\"\r\n      }\r\n      onClick={() =>\r\n        setContext(() => {\r\n          let newcontext = context;\r\n          newcontext.collections = props.navlet.name;\r\n          newcontext.search = \"\";\r\n          newcontext.page = 0;\r\n          let final = JSON.parse(JSON.stringify(newcontext));\r\n          return final;\r\n        })\r\n      }\r\n    >\r\n      {displayIcon()}\r\n      <span className=\"navletSpan\">{props.navlet.display}</span>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Navlet;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\bits\\Description.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\bits\\Name.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\bits\\Flavor.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\bits\\Tag.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\bits\\AddSubtract.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\bits\\Ranks.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\bits\\Table.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\bits\\NameValuePair.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\bits\\HyperText.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\ModalCardDisplay.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\CardModifier.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\ModalTableDisplay.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\navigation\\NavMaster.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\navigation\\Linklet.js",["289"],"import React, { useContext } from \"react\";\r\nimport Context from \"../../data/context.js\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ReactComponent as Collections } from \"../../data/icons/collections.svg\";\r\nimport { ReactComponent as Herosheet } from \"../../data/icons/herosheet.svg\";\r\nimport { FaGlobe } from \"react-icons/fa\";\r\n\r\nconst Linklet = (props) => {\r\n  const [context, setContext] = useContext(Context);\r\n\r\n  const displayIcon = () => {\r\n    switch (props.type) {\r\n      case \"collections\":\r\n        if (context.link === props.type) {\r\n          return <Collections className=\"iconsvgselected\" />;\r\n        }\r\n        return <Collections className=\"iconsvg\" />;\r\n      case \"herosheet\":\r\n        if (context.link === props.type) {\r\n          return <Herosheet className=\"iconsvgselected\" />;\r\n        }\r\n        return <Herosheet className=\"iconsvg\" />;\r\n      case \"worldsheet\":\r\n        if (context.link === props.type) {\r\n          return <FaGlobe className=\"pbottom5px\" />;\r\n        }\r\n        return <FaGlobe className=\"pbottom5px\" />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Link\r\n      className={\r\n        context.link === props.type\r\n          ? \"link button--selected bordered\"\r\n          : \"link button bordered\"\r\n      }\r\n      onClick={() =>\r\n        setContext(() => {\r\n          let newcontext = context;\r\n          newcontext.link = props.type;\r\n          let final = JSON.parse(JSON.stringify(newcontext));\r\n          return final;\r\n        })\r\n      }\r\n      to={props.link}\r\n    >\r\n      {displayIcon()}\r\n      <span className=\"navletSpan\">{props.text}</span>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default Linklet;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\ModalAction.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\cards\\ModalConnection.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\navigation\\Footer.js",["290"],"import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"row footer\">\r\n      <span className=\"row heading\">by Saker Tarsos for WTF</span>\r\n      <span className=\"button bordered row heading mleft30px\">\r\n        <a\r\n          className=\"orangetext\"\r\n          href=\"https://www.patreon.com/sakertarsos\"\r\n          rel=\"noreferror\"\r\n          target=\"_blank\"\r\n        >\r\n          support\r\n        </a>\r\n      </span>\r\n      <div className=\"rightfloat mright12px\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\worldsheet\\Scene.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\components\\charactersheet\\Notes.js",[],{"ruleId":"291","replacedBy":"292"},{"ruleId":"293","replacedBy":"294"},{"ruleId":"295","severity":1,"message":"296","line":15,"column":49,"nodeType":"297","messageId":"298","endLine":15,"endColumn":51},{"ruleId":"295","severity":1,"message":"299","line":22,"column":38,"nodeType":"297","messageId":"300","endLine":22,"endColumn":40},{"ruleId":"295","severity":1,"message":"299","line":30,"column":11,"nodeType":"301","messageId":"302","endLine":30,"endColumn":18},{"ruleId":"303","severity":1,"message":"304","line":39,"column":9,"nodeType":"305","messageId":"306","endLine":39,"endColumn":13},{"ruleId":"303","severity":1,"message":"307","line":86,"column":3,"nodeType":"305","messageId":"306","endLine":86,"endColumn":6},{"ruleId":"308","severity":1,"message":"309","line":300,"column":42,"nodeType":"310","messageId":"311","endLine":300,"endColumn":59},{"ruleId":"303","severity":1,"message":"312","line":10,"column":10,"nodeType":"305","messageId":"306","endLine":10,"endColumn":19},{"ruleId":"303","severity":1,"message":"312","line":12,"column":10,"nodeType":"305","messageId":"306","endLine":12,"endColumn":19},{"ruleId":"295","severity":1,"message":"296","line":129,"column":44,"nodeType":"297","messageId":"298","endLine":129,"endColumn":46},{"ruleId":"295","severity":1,"message":"296","line":139,"column":44,"nodeType":"297","messageId":"298","endLine":139,"endColumn":46},{"ruleId":"303","severity":1,"message":"313","line":15,"column":10,"nodeType":"305","messageId":"306","endLine":15,"endColumn":21},{"ruleId":"291","replacedBy":"314"},{"ruleId":"293","replacedBy":"315"},{"ruleId":"295","severity":1,"message":"299","line":106,"column":43,"nodeType":"301","messageId":"302","endLine":106,"endColumn":50},{"ruleId":"303","severity":1,"message":"316","line":4,"column":8,"nodeType":"305","messageId":"306","endLine":4,"endColumn":11},{"ruleId":"295","severity":1,"message":"299","line":48,"column":11,"nodeType":"301","messageId":"302","endLine":48,"endColumn":18},{"ruleId":"295","severity":1,"message":"299","line":54,"column":11,"nodeType":"301","messageId":"302","endLine":54,"endColumn":18},{"ruleId":"295","severity":1,"message":"299","line":58,"column":7,"nodeType":"301","messageId":"302","endLine":58,"endColumn":14},{"ruleId":"317","severity":1,"message":"318","line":14,"column":5,"nodeType":"319","messageId":"320","endLine":55,"endColumn":6},{"ruleId":"317","severity":1,"message":"318","line":12,"column":5,"nodeType":"319","messageId":"320","endLine":28,"endColumn":6},{"ruleId":"321","severity":1,"message":"322","line":8,"column":9,"nodeType":"323","endLine":13,"endColumn":10},"no-native-reassign",["324"],"no-negated-in-lhs",["325"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","expectedInside","ReturnStatement","expectedReturnValue","no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'nug' is assigned a value but never used.","no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf","'character' is assigned a value but never used.","'currentStat' is assigned a value but never used.",["324"],["325"],"'Col' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","no-global-assign","no-unsafe-negation"]