[{"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\index.js":"1","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\App.js":"2","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\data\\context.js":"3","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\data\\character.js":"4","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\navigation\\NavMaster.js":"5","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\Error.js":"6","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\Collections.js":"7","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\HeroSheet.js":"8","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\navigation\\Linklet.js":"9","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\navigation\\Navbar.js":"10","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardList.js":"11","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Search.js":"12","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\StatSheet.js":"13","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\RandomCharModal.js":"14","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Stats.js":"15","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Resources.js":"16","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Attributes.js":"17","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\RandomCharCard.js":"18","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Defenses.js":"19","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\navigation\\Navlet.js":"20","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Card.js":"21","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\RollCard.js":"22","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Defense.js":"23","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Name.js":"24","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\NameValuePair.js":"25","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Description.js":"26","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Stat.js":"27","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Flavor.js":"28","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Tag.js":"29","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Table.js":"30","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Ranks.js":"31","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\AddSubtract.js":"32","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\SpellCostCard.js":"33","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\data\\worldstate.js":"34","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\WorldSheet.js":"35","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\ExportCard.js":"36","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\SaveCard.js":"37","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\SaveModal.js":"38","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\ExportModal.js":"39","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\ImportCard.js":"40","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\SlotName.js":"41","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardCreature.js":"42","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardItem.js":"43","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardSpell.js":"44","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalItemAttack.js":"45","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalItemSale.js":"46","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalSpellCast.js":"47","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalCreatureAttack.js":"48","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalCreatureEdit.js":"49","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardProp.js":"50","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalCardDisplay.js":"51","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\utils\\exports.js":"52","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalTableDisplay.js":"53","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardScene.js":"54","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardEnvironment.js":"55","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalPropAction.js":"56"},{"size":219,"mtime":1632191871752,"results":"57","hashOfConfig":"58"},{"size":2360,"mtime":1638922095663,"results":"59","hashOfConfig":"58"},{"size":101,"mtime":1632191871807,"results":"60","hashOfConfig":"58"},{"size":105,"mtime":1632191871874,"results":"61","hashOfConfig":"58"},{"size":1534,"mtime":1639018359359,"results":"62","hashOfConfig":"58"},{"size":793,"mtime":1637277561777,"results":"63","hashOfConfig":"58"},{"size":2303,"mtime":1639018359365,"results":"64","hashOfConfig":"58"},{"size":4456,"mtime":1639018982767,"results":"65","hashOfConfig":"58"},{"size":1632,"mtime":1639372166606,"results":"66","hashOfConfig":"58"},{"size":581,"mtime":1636776144120,"results":"67","hashOfConfig":"58"},{"size":3314,"mtime":1639018359257,"results":"68","hashOfConfig":"58"},{"size":3718,"mtime":1639020383484,"results":"69","hashOfConfig":"58"},{"size":389,"mtime":1632191873452,"results":"70","hashOfConfig":"58"},{"size":5362,"mtime":1640322876048,"results":"71","hashOfConfig":"58"},{"size":4464,"mtime":1639018904497,"results":"72","hashOfConfig":"58"},{"size":5260,"mtime":1639018846764,"results":"73","hashOfConfig":"58"},{"size":9165,"mtime":1639352942253,"results":"74","hashOfConfig":"58"},{"size":2070,"mtime":1639018359314,"results":"75","hashOfConfig":"58"},{"size":6258,"mtime":1639353058744,"results":"76","hashOfConfig":"58"},{"size":2953,"mtime":1639018359360,"results":"77","hashOfConfig":"58"},{"size":3444,"mtime":1639018359243,"results":"78","hashOfConfig":"58"},{"size":1165,"mtime":1632191873415,"results":"79","hashOfConfig":"58"},{"size":1169,"mtime":1639018359302,"results":"80","hashOfConfig":"58"},{"size":336,"mtime":1632191872597,"results":"81","hashOfConfig":"58"},{"size":287,"mtime":1632191872938,"results":"82","hashOfConfig":"58"},{"size":165,"mtime":1639019180129,"results":"83","hashOfConfig":"58"},{"size":513,"mtime":1637298461763,"results":"84","hashOfConfig":"58"},{"size":181,"mtime":1632191872692,"results":"85","hashOfConfig":"58"},{"size":700,"mtime":1632191872580,"results":"86","hashOfConfig":"58"},{"size":2265,"mtime":1639018359297,"results":"87","hashOfConfig":"58"},{"size":2776,"mtime":1640321873452,"results":"88","hashOfConfig":"58"},{"size":3025,"mtime":1639018359239,"results":"89","hashOfConfig":"58"},{"size":2816,"mtime":1639360470431,"results":"90","hashOfConfig":"58"},{"size":107,"mtime":1632871266663,"results":"91","hashOfConfig":"58"},{"size":3451,"mtime":1639018359367,"results":"92","hashOfConfig":"58"},{"size":1319,"mtime":1632873582738,"results":"93","hashOfConfig":"58"},{"size":4181,"mtime":1637298486420,"results":"94","hashOfConfig":"58"},{"size":4340,"mtime":1639367839797,"results":"95","hashOfConfig":"58"},{"size":8000,"mtime":1639286575640,"results":"96","hashOfConfig":"58"},{"size":1853,"mtime":1632877517198,"results":"97","hashOfConfig":"58"},{"size":2199,"mtime":1632879318114,"results":"98","hashOfConfig":"58"},{"size":6395,"mtime":1639018359249,"results":"99","hashOfConfig":"58"},{"size":8484,"mtime":1639018359256,"results":"100","hashOfConfig":"58"},{"size":4677,"mtime":1639356014568,"results":"101","hashOfConfig":"58"},{"size":8404,"mtime":1639018359277,"results":"102","hashOfConfig":"58"},{"size":3517,"mtime":1639018359281,"results":"103","hashOfConfig":"58"},{"size":1613,"mtime":1637277561846,"results":"104","hashOfConfig":"58"},{"size":6109,"mtime":1639018359272,"results":"105","hashOfConfig":"58"},{"size":1231,"mtime":1637277561778,"results":"106","hashOfConfig":"58"},{"size":3412,"mtime":1640576927140,"results":"107","hashOfConfig":"58"},{"size":3413,"mtime":1639018359268,"results":"108","hashOfConfig":"58"},{"size":7995,"mtime":1639018359369,"results":"109","hashOfConfig":"58"},{"size":1395,"mtime":1639018359285,"results":"110","hashOfConfig":"58"},{"size":2863,"mtime":1639018359263,"results":"111","hashOfConfig":"58"},{"size":4353,"mtime":1639524471736,"results":"112","hashOfConfig":"58"},{"size":1331,"mtime":1640576908152,"results":"113","hashOfConfig":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"zh4rwq",{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"116"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"116"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"116"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"116"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"116"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"116"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"116"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"116"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"116"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"116"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"116"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"116"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"116"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"116"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"116"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"116"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\index.js",[],["243","244"],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\App.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\data\\context.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\data\\character.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\navigation\\NavMaster.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\Error.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\Collections.js",["245","246","247","248"],"import React, { useContext } from \"react\";\r\nimport Navbar from \"../navigation/Navbar\";\r\nimport Search from \"../cards/Search\";\r\nimport CardList from \"../cards/CardList\";\r\nimport Context from \"../data/context\";\r\nlet contextData = require(`../data/orders.json`);\r\n\r\nconst Collections = () => {\r\n  const [context] = useContext(Context);\r\n\r\n  const filter = (filterBy) => {\r\n    //filterBy sets which property in the card the filter pays attention to. currently it's set to \"tags\"\r\n    let contextObjects = require(`../data/collections/` + context.collections);\r\n    let newData = [];\r\n    contextData[context.collections].map((name) => {\r\n      let element = contextObjects[name];\r\n      let toFilter;\r\n      if (typeof element[filterBy] === \"string\") {\r\n        toFilter = element[filterBy].toLowerCase();\r\n      } else {\r\n        toFilter = [];\r\n        element[filterBy].map((item) => {\r\n          toFilter.push(item.toLowerCase());\r\n        });\r\n      }\r\n      //toFilter is the case (or cases) to compare to the search terms. ex: [\"offensive\",\"chain\"]\r\n      let searchSplit = context.search.toLowerCase().split(\"+\");\r\n      for (let searchTerm of searchSplit) {\r\n        if (!toFilter.includes(searchTerm)) {\r\n          return;\r\n        }\r\n      }\r\n      newData.push(name);\r\n    });\r\n    return newData;\r\n  };\r\n\r\n  const ifSearch = () => {\r\n    let data = require(`../data/collections/` + context.collections);\r\n    if (context.search !== \"\") {\r\n      let filtered = filter(\"tags\");\r\n      if (filtered.length === 0) {\r\n        filtered = filter(\"name\");\r\n      }\r\n      if (filtered.length === 0) {\r\n        return (\r\n          <div className=\"outerbox\">Your search didn't return any hits.</div>\r\n        );\r\n      }\r\n\r\n      return (\r\n        <CardList\r\n          content={filtered}\r\n          form={\"plus\"}\r\n          deleteFrom={\"none\"}\r\n          category={context.collections}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <CardList\r\n        content={contextData[context.collections]}\r\n        form={\"plus\"}\r\n        deleteFrom={\"none\"}\r\n        category={context.collections}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"outerbox\">\r\n        <Navbar />\r\n        <Search />\r\n      </div>\r\n      {ifSearch()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Collections;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\HeroSheet.js",["249"],"import React, { useContext } from \"react\";\r\nimport CardList from \"../cards/CardList\";\r\nimport Context from \"../data/context.js\";\r\nimport Character from \"../data/character.js\";\r\nimport StatSheet from \"../charactersheet/StatSheet\";\r\nimport SlotName from \"../charactersheet/SlotName\";\r\nimport SaveModal from \"../charactersheet/SaveModal\";\r\nimport ExportModal from \"../charactersheet/ExportModal\";\r\nimport RandomCharModal from \"../charactersheet/RandomCharModal\";\r\nimport { sackstonesoap } from \"../utils/exports.js\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst HeroSheet = () => {\r\n  const [context, setContext] = useContext(Context);\r\n  const [character] = useContext(Character);\r\n\r\n  const categoryArray = [\r\n    { name: \"Skills\", value: \"skills\" },\r\n    { name: \"Traits\", value: \"traits\" },\r\n    { name: \"Spells\", value: \"spells\" },\r\n    { name: \"Creatures\", value: \"creatures\" },\r\n  ];\r\n\r\n  const getEncumbrance = () => {\r\n    let cards = require(`../data/collections/items`);\r\n    let encumbrance = 0;\r\n    for (let element of character.items) {\r\n      encumbrance += cards[element.name].weight;\r\n    }\r\n    for (let element of character.spells) {\r\n      encumbrance += 10;\r\n    }\r\n    encumbrance += Math.round(character.CASH / 25);\r\n    return encumbrance;\r\n  };\r\n\r\n  const weightString = () => {\r\n    let encumbrance = getEncumbrance();\r\n    let weightstring = sackstonesoap(encumbrance, \"inventory\");\r\n    return <span>{weightstring}</span>;\r\n  };\r\n\r\n  return (\r\n    <div className=\"charsheet\">\r\n      <div className=\"outerbox limitwidth\">\r\n        <span className=\"row rightfloat mright12px\">\r\n          <SaveModal savepath={\"SRDcharacters\"} context={\"character\"} />\r\n          <ExportModal context={\"character\"} />\r\n          <RandomCharModal />\r\n        </span>\r\n        <SlotName context={\"character\"} />\r\n        <StatSheet />\r\n      </div>\r\n      <div className=\"outerbox limitwidth\">\r\n        <div className=\"outerbox\">\r\n          <div className=\"row mleft5px fullwidth\">\r\n            <span>\r\n              <Link\r\n                onClick={() =>\r\n                  setContext(() => {\r\n                    let newcontext = context;\r\n                    newcontext.collections = \"items\";\r\n                    newcontext.link = \"collections\";\r\n                    let final = JSON.parse(JSON.stringify(newcontext));\r\n                    return final;\r\n                  })\r\n                }\r\n                className=\"row mleft5px button\"\r\n                to=\"/\"\r\n              >\r\n                Inventory\r\n              </Link>\r\n            </span>\r\n          </div>\r\n          <div className=\"outerbox fontsize\">\r\n            {getEncumbrance() > 100 && (\r\n              <span className=\"mleft5px orangetext\">ENCUMBERED!! </span>\r\n            )}\r\n            {getEncumbrance() <= 100 && (\r\n              <span className=\"mleft5px orangetext\">Encumbrance: </span>\r\n            )}\r\n            <span className=\"mleft5px\">{weightString()}</span>\r\n          </div>\r\n          <CardList\r\n            context={\"character\"}\r\n            content={character.items}\r\n            form={\"minus\"}\r\n            deleteFrom={\"items\"}\r\n            category={\"items\"}\r\n          />\r\n        </div>\r\n        {categoryArray.map((category, index) => {\r\n          return (\r\n            <div className=\"outerbox\" key={index}>\r\n              <div className=\"row mleft5px fullwidth\">\r\n                <span>\r\n                  <Link\r\n                    onClick={() =>\r\n                      setContext(() => {\r\n                        let newcontext = context;\r\n                        newcontext.collections = category.value;\r\n                        newcontext.link = \"collections\";\r\n                        let final = JSON.parse(JSON.stringify(newcontext));\r\n                        return final;\r\n                      })\r\n                    }\r\n                    className=\"row mleft5px button\"\r\n                    to=\"/\"\r\n                  >\r\n                    {category.name}\r\n                  </Link>\r\n                </span>\r\n              </div>\r\n              <CardList\r\n                context={\"character\"}\r\n                content={character[category.value]}\r\n                form={\"minus\"}\r\n                deleteFrom={category.value}\r\n                category={category.value}\r\n                key={index}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HeroSheet;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\navigation\\Linklet.js",["250"],"import React, { useContext } from \"react\";\r\nimport Context from \"../data/context.js\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ReactComponent as Collections } from \"../data/icons/collections.svg\";\r\nimport { ReactComponent as Herosheet } from \"../data/icons/herosheet.svg\";\r\nimport { FaGlobe } from \"react-icons/fa\";\r\n\r\nconst Linklet = (props) => {\r\n  const [context, setContext] = useContext(Context);\r\n\r\n  const displayIcon = () => {\r\n    switch (props.type) {\r\n      case \"collections\":\r\n        if (context.link === props.type) {\r\n          return <Collections className=\"iconsvgselected\" />;\r\n        }\r\n        return <Collections className=\"iconsvg\" />;\r\n      case \"herosheet\":\r\n        if (context.link === props.type) {\r\n          return <Herosheet className=\"iconsvgselected\" />;\r\n        }\r\n        return <Herosheet className=\"iconsvg\" />;\r\n      case \"worldsheet\":\r\n        if (context.link === props.type) {\r\n          return <FaGlobe className=\"pbottom5px\" />;\r\n        }\r\n        return <FaGlobe className=\"pbottom5px\" />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Link\r\n      className={\r\n        context.link === props.type\r\n          ? \"link button--selected bordered\"\r\n          : \"link button bordered\"\r\n      }\r\n      onClick={() =>\r\n        setContext(() => {\r\n          let newcontext = context;\r\n          newcontext.link = props.type;\r\n          let final = JSON.parse(JSON.stringify(newcontext));\r\n          return final;\r\n        })\r\n      }\r\n      to={props.link}\r\n    >\r\n      {displayIcon()}\r\n      <span className=\"navletSpan\">{props.text}</span>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default Linklet;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\navigation\\Navbar.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardList.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Search.js",["251","252","253"],"import React, { useContext, useState } from \"react\";\r\nimport Context from \"../data/context\";\r\nimport { FaSearch } from \"react-icons/fa\";\r\nimport { s } from \"../utils/exports.js\";\r\nimport orders from \"../data/orders.json\";\r\n\r\nconst Search = () => {\r\n  const [context, setContext] = useContext(Context);\r\n  const [data, setData] = useState(\"Enter tag or name\");\r\n\r\n  const contextData = require(`../data/collections/` + context.collections);\r\n\r\n  const submitSearch = () => {\r\n    let context2 = context;\r\n    if (context2.search === \"\") {\r\n      context2.search = data;\r\n    } else {\r\n      context2.search = context2.search + \"+\" + data;\r\n    }\r\n    setContext(() => {\r\n      return JSON.parse(JSON.stringify(context2));\r\n    });\r\n  };\r\n\r\n  const resetSearch = () => {\r\n    let context2 = context;\r\n    context2.search = \"\";\r\n    document.getElementById(\"searchbox\").value = \"\";\r\n    setData(() => {\r\n      return \"Enter tag or name\";\r\n    });\r\n    setContext(() => {\r\n      return JSON.parse(JSON.stringify(context2));\r\n    });\r\n  };\r\n\r\n  const filter = (filterBy) => {\r\n    let newData = [];\r\n    orders[context.collections].map((element) => {\r\n      let toFilter;\r\n      let elementFull = contextData[element];\r\n      if (typeof elementFull[filterBy] === \"string\") {\r\n        toFilter = elementFull[filterBy].toLowerCase();\r\n      } else {\r\n        toFilter = [];\r\n        elementFull[filterBy].map((item) => {\r\n          toFilter.push(item.toLowerCase());\r\n        });\r\n      }\r\n      let searchSplit = context.search.toLowerCase().split(\"+\");\r\n      for (let searchTerm of searchSplit) {\r\n        if (!toFilter.includes(searchTerm)) {\r\n          return;\r\n        }\r\n      }\r\n      newData.push(element);\r\n    });\r\n    return newData;\r\n  };\r\n\r\n  const randomResult = () => {\r\n    let resultpool;\r\n    let finalresult;\r\n\r\n    if (context.search === \"\") {\r\n      resultpool = orders[context.collections];\r\n    } else {\r\n      resultpool = filter(\"tags\");\r\n      if (resultpool.length === 0) {\r\n        resultpool = filter(\"name\");\r\n      }\r\n      if (resultpool.length === 1) {\r\n        resultpool = orders[context.collections];\r\n      }\r\n      if (resultpool.length === 0) {\r\n        let context2 = context;\r\n        context2.search = \"randomization error\";\r\n        setContext(() => {\r\n          return JSON.parse(JSON.stringify(context2));\r\n        });\r\n        return;\r\n      }\r\n    }\r\n    finalresult = s(resultpool);\r\n    let finalresultname = contextData[finalresult].name;\r\n    let context2 = context;\r\n    context2.search = finalresultname;\r\n    setContext(() => {\r\n      return JSON.parse(JSON.stringify(context2));\r\n    });\r\n  };\r\n\r\n  const defaultPlaceholder = () => {\r\n    if (context.search === \"\") {\r\n      return \"Enter tag or name\";\r\n    }\r\n    return context.search;\r\n  };\r\n\r\n  return (\r\n    <div className=\"row mleft5px fullwidth\">\r\n      <div className=\"flex fullwidth\">\r\n        <input\r\n          id=\"searchbox\"\r\n          className=\"button bordered link flexgrow2 pleft5px fontsize\"\r\n          placeholder={defaultPlaceholder()}\r\n          type=\"text\"\r\n          onChange={(e) => setData(e.target.value)}\r\n        />\r\n        <button\r\n          className=\"button bordered link searchbutton\"\r\n          onClick={submitSearch}\r\n          value=\"Search\"\r\n        >\r\n          <FaSearch />\r\n        </button>\r\n        <button\r\n          className=\"button bordered link searchbutton\"\r\n          onClick={resetSearch}\r\n        >\r\n          <b>C</b>\r\n        </button>\r\n        <button\r\n          className=\"button bordered link mright12px searchbutton\"\r\n          onClick={randomResult}\r\n        >\r\n          <b>R</b>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\StatSheet.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\RandomCharModal.js",["254"],"import React, { useContext, useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { FaDiceD20 } from \"react-icons/fa\";\r\nimport Character from \"../data/character.js\";\r\nimport { s, r } from \"../utils/exports.js\";\r\nimport architecture from \"../data/architecture.json\";\r\nimport RandomCharCard from \"./RandomCharCard.js\";\r\nlet contextData = require(`../data/orders.json`);\r\n\r\nconst RandomCharModal = () => {\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [character, setCharacter] = useContext(Character);\r\n\r\n  const modalOpening = () => {\r\n    setModalOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setModalOpen(false);\r\n  };\r\n\r\n  const charLevels = architecture.charLevels;\r\n  const charTypes = architecture.charTypes;\r\n\r\n  const ifListIncludes = (array, target) => {\r\n    console.log(array);\r\n    console.log(target);\r\n    for (let element of array) {\r\n      console.log(element.name);\r\n      if (element.name === target.name) return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const charGen = (heroType) => {\r\n    let levels = charLevels[heroType];\r\n    let newchar = {};\r\n    let collections = [\"skills\", \"traits\", \"items\", \"spells\", \"creatures\"];\r\n    let attributes = architecture.attributeArray;\r\n    let saves = [\"ha\", \"ka\", \"ba\"];\r\n    let otherstats = [\r\n      \"level\",\r\n      \"PRO\",\r\n      \"actions\",\r\n      \"MCOST\",\r\n      \"life\",\r\n      \"maxlife\",\r\n      \"HERODICE\",\r\n      \"XP\",\r\n      \"CASH\",\r\n    ];\r\n\r\n    for (let collection of collections) {\r\n      newchar[collection] = [];\r\n      for (let i = 0; i < levels[collection]; i++) {\r\n        let data = require(`../data/collections/` + collection);\r\n        //modifier that adds increased chance of increasing a card rank instead of adding new card\r\n        //based on how high levels[collection] is\r\n        if (\r\n          //collection !== \"items\" &&\r\n          r(levels[collection]) > 3 &&\r\n          newchar[collection].length > 3\r\n        ) {\r\n          let i = 0;\r\n          while (true) {\r\n            let card = newchar[collection][r(newchar[collection].length - 1)];\r\n            let cardObject = data[card.name];\r\n            if (!cardObject.ranks) break;\r\n            if (card.savedrank < cardObject.ranks.length - 1) {\r\n              card.savedrank += 1;\r\n              break;\r\n            }\r\n            if (i > 30) {\r\n              break;\r\n            }\r\n            i++;\r\n          }\r\n        } else {\r\n          let selectionName = s(contextData[collection]);\r\n          let selection = data[selectionName];\r\n          let selectionObject = { name: selectionName, savedrank: 0 };\r\n          if (selection.table !== undefined) {\r\n            selectionObject.savedresult = r(selection.table.length);\r\n          }\r\n          //below adds rank to card instead of adding duplicate\r\n          if (\r\n            ifListIncludes(newchar[collection], selectionObject) &&\r\n            collection !== \"items\"\r\n          ) {\r\n            console.log(\"duplicate\");\r\n            if (selection.ranks.length > 1) {\r\n              for (let card in newchar[collection]) {\r\n                if (card.name === selection.name) {\r\n                  card.savedrank += 1;\r\n                }\r\n              }\r\n            } else {\r\n              let newSelectionName = s(contextData[collection]);\r\n              let newSelection = data[newSelectionName];\r\n              let newSelectionObject = { name: selectionName, savedrank: 0 };\r\n              if (newSelection.table !== undefined) {\r\n                newSelectionObject.savedresult = r(newSelection.table.length);\r\n              }\r\n              //makeshift solution for now, might need while statement\r\n              newchar[collection].push(newSelectionObject);\r\n            }\r\n          } else {\r\n            newchar[collection].push(selectionObject);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let attribute of attributes) {\r\n      newchar[attribute] = 0;\r\n    }\r\n\r\n    for (let i = 0; i < levels.stats; i++) {\r\n      let attribute = s(attributes);\r\n      //add stat limit?\r\n      newchar[attribute]++;\r\n    }\r\n\r\n    for (let save of saves) {\r\n      newchar[save] = 0;\r\n    }\r\n\r\n    for (let otherstat of otherstats) {\r\n      newchar[otherstat] = levels[otherstat];\r\n    }\r\n\r\n    //if (gear == \"true\") { give hero an item each marked \"armor\" or \"clothes\", \"weapon\" }\r\n\r\n    newchar.name = \"Novelus Charactericus\";\r\n    newchar.type = levels.name;\r\n\r\n    setCharacter(newchar);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FaDiceD20\r\n        className=\"icon mtop10px\"\r\n        onClick={() => {\r\n          modalOpening();\r\n        }}\r\n      />\r\n      <Modal show={modalOpen} onHide={closeModal}>\r\n        <Modal.Header className=\"modalbackground\">\r\n          Generate Random Hero\r\n        </Modal.Header>\r\n        <Modal.Body className=\"modalbackground\">\r\n          {charTypes.map((type, index) => {\r\n            return (\r\n              <RandomCharCard\r\n                key={index}\r\n                name={type.name}\r\n                flavor={type.flavor}\r\n                description={type.description}\r\n                stats={type.stats}\r\n                buttonname={\"Generate\"}\r\n                buttonprop={type.value}\r\n                buttonfunction={charGen}\r\n              />\r\n            );\r\n          })}\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\nexport default RandomCharModal;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Stats.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Resources.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Attributes.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\RandomCharCard.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Defenses.js",["255"],"import React, { useState, useContext } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { r } from \"../utils/exports\";\r\nimport Character from \"../data/character.js\";\r\nimport { FaRegEdit } from \"react-icons/fa\";\r\nimport Defense from \"./Defense.js\";\r\nimport architecture from \"../data/architecture.json\";\r\n\r\nconst Defenses = () => {\r\n  const [character] = useContext(Character);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [modalStat, setModalStat] = useState(\"ha\");\r\n  const [result, setResult] = useState(\"\");\r\n  const [edit, setEdit] = useState(false);\r\n  const [currentStat, setCurrentStat] = useState(character[modalStat]);\r\n\r\n  const defenses = architecture.defenses;\r\n  const statMasks = architecture.statMasks;\r\n\r\n  const deforder = [\"ha\", \"ka\", \"ba\"];\r\n\r\n  const bonuses = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [9, 10],\r\n  ];\r\n\r\n  const calcDefense = (defense) => {\r\n    let substats = defense.substats;\r\n    let total = 0;\r\n    total += Math.max(character[substats[0]], character[substats[1]]);\r\n    total += character.PRO;\r\n    total += character[defense.name];\r\n    let cards = require(`../data/collections/items`);\r\n\r\n    //for (let item of character.items) {\r\n    for (let item of character.items) {\r\n      let CardItem = cards[item.name];\r\n      for (let i = 0; i < CardItem.stat.length; i++) {\r\n        if (CardItem.stat[i] === defense.name && item.worn === true) {\r\n          total += parseInt(CardItem.number[i]);\r\n        }\r\n      }\r\n    }\r\n    //}\r\n    if (defense.name === \"ba\") {\r\n      total += Math.round(character.CASH / 250);\r\n    }\r\n    return total;\r\n  };\r\n\r\n  const modalOpenStat = (stat) => {\r\n    setResult(() => {\r\n      return \"\";\r\n    });\r\n    setModalOpen(true);\r\n    setModalStat(stat);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setModalOpen(false);\r\n  };\r\n\r\n  const editToggle = (status) => {\r\n    setEdit(!status);\r\n  };\r\n\r\n  const editStat = (amount, stat) => {\r\n    character[stat] += parseInt(amount);\r\n    setCurrentStat(character[stat]);\r\n  };\r\n\r\n  const save = (modifier) => {\r\n    let rollResult = r(20) + 1;\r\n    let total = rollResult + modifier;\r\n    if (total <= calcDefense(defenses[modalStat])) {\r\n      return `Success! Result: ${rollResult}. Total: ${total}.`;\r\n    } else {\r\n      return `Failure! Result: ${rollResult}. Total: ${total}.`;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"outerbox\">\r\n      <div className=\"row mleft5px\">DEFENSES</div>\r\n      <div className=\"padded5px mleft5px flex\">\r\n        {deforder.map((defense, index) => {\r\n          return (\r\n            <button\r\n              className=\"button bordered padded5px margin5px flexgrow fontsize\"\r\n              key={index}\r\n              onClick={() => {\r\n                modalOpenStat(defenses[defense].name);\r\n                setEdit(false);\r\n              }}\r\n            >\r\n              <Defense defense={defenses[defense]} />\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n      <Modal show={modalOpen} onHide={closeModal}>\r\n        <Modal.Header className=\"modalbackground\">\r\n          <span className=\"cardname center\">\r\n            {edit === true && <span className=\"cardname\">Edit</span>}\r\n            <i>{statMasks[modalStat]}</i> save: (\r\n            {calcDefense(defenses[modalStat])})\r\n          </span>\r\n          <span>\r\n            <FaRegEdit\r\n              className=\"icon rightfloat\"\r\n              onClick={() => {\r\n                editToggle(edit);\r\n              }}\r\n            ></FaRegEdit>\r\n          </span>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"modalbackground\">\r\n          {edit === true && (\r\n            //flex these\r\n            <div>\r\n              <div className=\"outerbox\">\r\n                <div className=\"flex\">\r\n                  <button\r\n                    className=\"button bordered padded5px margin5px flexgrow\"\r\n                    onClick={() => {\r\n                      editStat(-1, modalStat);\r\n                    }}\r\n                  >\r\n                    -1\r\n                  </button>\r\n                  <button\r\n                    className=\"button bordered padded5px margin5px flexgrow\"\r\n                    onClick={() => {\r\n                      editStat(+1, modalStat);\r\n                    }}\r\n                  >\r\n                    +1\r\n                  </button>\r\n                </div>\r\n                <div className=\"flex\">\r\n                  <button\r\n                    className=\"button bordered padded5px margin5px fullwidth\"\r\n                    onClick={() => {\r\n                      editToggle(edit);\r\n                    }}\r\n                  >\r\n                    Done\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <hr></hr>\r\n            </div>\r\n          )}\r\n          {edit === false && (\r\n            <div>\r\n              <div>\r\n                {bonuses.map((bonusrow, index) => {\r\n                  return (\r\n                    <div className=\"flex\" key={index}>\r\n                      {bonusrow.map((bonus, index) => {\r\n                        return (\r\n                          <button\r\n                            className=\"button bordered padded5px margin5px flexgrow\"\r\n                            key={index}\r\n                            onClick={() => {\r\n                              setResult(save(bonus));\r\n                            }}\r\n                          >\r\n                            +{bonus}\r\n                          </button>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n              <hr></hr>\r\n              <div\r\n                className=\"center button\"\r\n                onClick={() => {\r\n                  navigator.clipboard.writeText(\r\n                    character.name +\r\n                      \" makes a \" +\r\n                      architecture.statMasks[modalStat] +\r\n                      \" save!\\nThe save is a \" +\r\n                      result\r\n                  );\r\n                }}\r\n              >\r\n                {result}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Defenses;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\navigation\\Navlet.js",["256"],"import React, { useContext } from \"react\";\r\nimport Context from \"../data/context.js\";\r\nimport { ReactComponent as Items } from \"../data/icons/items.svg\";\r\nimport { ReactComponent as Skills } from \"../data/icons/skills.svg\";\r\nimport { ReactComponent as Traits } from \"../data/icons/traits.svg\";\r\nimport { ReactComponent as Spells } from \"../data/icons/magic.svg\";\r\nimport { ReactComponent as Creatures } from \"../data/icons/creatures.svg\";\r\nimport { FaMask, FaTree, FaPuzzlePiece } from \"react-icons/fa\";\r\n\r\nconst Navlet = (props) => {\r\n  const [context, setContext] = useContext(Context);\r\n\r\n  const displayIcon = () => {\r\n    switch (props.navlet.name) {\r\n      case \"items\":\r\n        if (context.collections === props.navlet.name) {\r\n          return <Items className=\"iconsvgselected\" />;\r\n        }\r\n        return <Items className=\"iconsvg\" />;\r\n      case \"skills\":\r\n        if (context.collections === props.navlet.name) {\r\n          return <Skills className=\"iconsvgselected\" />;\r\n        }\r\n        return <Skills className=\"iconsvg\" />;\r\n      case \"traits\":\r\n        if (context.collections === props.navlet.name) {\r\n          return <Traits className=\"iconsvgselected\" />;\r\n        }\r\n        return <Traits className=\"iconsvg\" />;\r\n      case \"spells\":\r\n        if (context.collections === props.navlet.name) {\r\n          return <Spells className=\"iconsvgselected\" />;\r\n        }\r\n        return <Spells className=\"iconsvg\" />;\r\n      case \"creatures\":\r\n        if (context.collections === props.navlet.name) {\r\n          return <Creatures className=\"iconsvgselected\" />;\r\n        }\r\n        return <Creatures className=\"iconsvg\" />;\r\n      case \"environments\":\r\n        if (context.collections === props.navlet.name) {\r\n          return <FaTree className=\"iconsvg\" />;\r\n        }\r\n        return <FaTree className=\"iconsvg\" />;\r\n      case \"scenes\":\r\n        if (context.collections === props.navlet.name) {\r\n          return <FaMask className=\"iconsvg\" />;\r\n        }\r\n        return <FaMask className=\"iconsvg\" />;\r\n      case \"props\":\r\n        if (context.collections === props.navlet.name) {\r\n          return <FaPuzzlePiece className=\"iconsvg\" />;\r\n        }\r\n        return <FaPuzzlePiece className=\"iconsvg\" />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className={\r\n        context.collections === props.navlet.name\r\n          ? \"link button--selected bordered flexgrow\"\r\n          : \"link button bordered flexgrow\"\r\n      }\r\n      onClick={() =>\r\n        setContext(() => {\r\n          let newcontext = context;\r\n          newcontext.collections = props.navlet.name;\r\n          newcontext.search = \"\";\r\n          let final = JSON.parse(JSON.stringify(newcontext));\r\n          return final;\r\n        })\r\n      }\r\n    >\r\n      {displayIcon()}\r\n      {context.collections === props.navlet.name && (\r\n        <span className=\"navletSpan\">{props.navlet.display}</span>\r\n      )}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Navlet;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Card.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\RollCard.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Defense.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Name.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\NameValuePair.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Description.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Stat.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Flavor.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Tag.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Table.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Ranks.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\AddSubtract.js",["257","258"],"import React, { useContext } from \"react\";\r\nimport { FaPlusCircle, FaRegTrashAlt } from \"react-icons/fa\";\r\nimport { ReactComponent as Herosheet } from \"../data/icons/herosheet.svg\";\r\nimport { FaGlobe } from \"react-icons/fa\";\r\nimport Context from \"../data/context\";\r\nimport Character from \"../data/character\";\r\nimport WorldState from \"../data/worldstate.js\";\r\nimport toaster from \"toasted-notes\";\r\nimport \"toasted-notes/src/styles.css\";\r\n\r\nconst AddSubtract = (props) => {\r\n  const [context] = useContext(Context);\r\n  const [character, setCharacter] = useContext(Character);\r\n  const [worldState, setWorldState] = useContext(WorldState);\r\n  let cards = require(`../data/collections/` + props.category);\r\n\r\n  const gate = () => {\r\n    if (props.context === \"character\") {\r\n      return character;\r\n    }\r\n    if (props.context === \"worldstate\") {\r\n      return worldState;\r\n    }\r\n  };\r\n\r\n  const addCard = () => {\r\n    toaster.notify(\r\n      `Card (${cards[props.card.name].name}) added to ${props.context}!`,\r\n      {\r\n        duration: 1000,\r\n      }\r\n    );\r\n    let instanced = { name: props.card.name, savedrank: 0 };\r\n    if (cards[props.card.name].table !== undefined) {\r\n      instanced.savedresult = 0;\r\n    }\r\n    if (props.category === \"creatures\") {\r\n      instanced.lifecurrent = cards[props.card.name].life;\r\n    }\r\n    let newslot = gate();\r\n    newslot[props.category].push(instanced);\r\n    if (props.category !== \"items\") {\r\n      let jsonArray = newslot[props.category].map(JSON.stringify);\r\n      let uniqueSet = new Set(jsonArray);\r\n      let uniqueArray = Array.from(uniqueSet).map(JSON.parse);\r\n      newslot[props.category] = uniqueArray;\r\n    }\r\n    if (props.context === \"character\") {\r\n      setCharacter(JSON.parse(JSON.stringify(newslot)));\r\n    }\r\n    if (props.context === \"worldstate\") {\r\n      setWorldState(JSON.parse(JSON.stringify(newslot)));\r\n    }\r\n  };\r\n\r\n  const deleteCard = () => {\r\n    toaster.notify(\r\n      `Card (${cards[props.card.name].name}) removed from ${props.context}!`,\r\n      {\r\n        duration: 1000,\r\n      }\r\n    );\r\n    let newslot = gate();\r\n    newslot[props.deleteFrom].splice(props.placement, 1);\r\n    if (props.context === \"character\") {\r\n      setCharacter(JSON.parse(JSON.stringify(newslot)));\r\n    }\r\n    if (props.context === \"worldstate\") {\r\n      setWorldState(JSON.parse(JSON.stringify(newslot)));\r\n    }\r\n  };\r\n\r\n  if (props.form === \"plus\") {\r\n    return (\r\n      <div>\r\n        {props.context === \"character\" && context.persona === \"PC\" && (\r\n          <FaPlusCircle className=\"icon mright12px\" onClick={addCard} />\r\n        )}\r\n        {props.context === \"worldstate\" && context.persona === \"TC\" && (\r\n          <FaPlusCircle className=\"icon mright12px\" onClick={addCard} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  if (props.form === \"minus\") {\r\n    return (\r\n      <FaRegTrashAlt\r\n        className=\"icon mright12px mtop10px\"\r\n        onClick={() => {\r\n          deleteCard();\r\n        }}\r\n      />\r\n    );\r\n  }\r\n};\r\n\r\nexport default AddSubtract;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\SpellCostCard.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\data\\worldstate.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\WorldSheet.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\ExportCard.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\SaveCard.js",["259"],"import React, { useState, useContext } from \"react\";\r\nimport Name from \"../cards/Name\";\r\nimport Description from \"../cards/Description\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Character from \"../data/character.js\";\r\nimport WorldState from \"../data/worldstate.js\";\r\nimport { FaRegTrashAlt, FaRegFolderOpen } from \"react-icons/fa\";\r\n\r\nconst SaveCard = (props) => {\r\n  const [character] = useContext(Character);\r\n  const [worldState] = useContext(WorldState);\r\n  const [expanded, setExpanded] = useState(false);\r\n  const [confirm, setConfirm] = useState(false);\r\n  const [confirmType, setConfirmType] = useState({});\r\n\r\n  const { context, eachSlot, saveSlot, loadSlot, deleteSlot, slot } = props;\r\n\r\n  const gate = () => {\r\n    if (context === \"character\") {\r\n      return character;\r\n    }\r\n    if (context === \"worldstate\") {\r\n      return worldState;\r\n    }\r\n  };\r\n\r\n  const expandCollapse = (status) => {\r\n    setExpanded(!status);\r\n  };\r\n\r\n  const confirmToggle = (status) => {\r\n    setConfirm(!status);\r\n  };\r\n\r\n  const confirmAction = () => {\r\n    switch (confirmType.type) {\r\n      case \"overwrite\":\r\n        saveSlot(slot, gate());\r\n        break;\r\n      case \"delete\":\r\n        deleteSlot(slot);\r\n        break;\r\n      case \"load\":\r\n        loadSlot(slot);\r\n    }\r\n    confirmToggle(confirm);\r\n  };\r\n\r\n  const stats = [\r\n    { name: \"Level\", value: \"level\" },\r\n    { name: \"Life\", value: \"life\" },\r\n    { name: \"Cash\", value: \"CASH\" },\r\n    { name: \"XP\", value: \"XP\" },\r\n    { name: \"Type\", value: \"type\" },\r\n  ];\r\n\r\n  if (eachSlot.name === undefined) {\r\n    return (\r\n      <div>\r\n        <span className=\"padded5px outerbox\">(empty)</span>\r\n        <button\r\n          onClick={() => {\r\n            saveSlot(slot, gate());\r\n          }}\r\n          className=\"button bordered padded5px margin5px\"\r\n        >\r\n          save\r\n        </button>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <Col>\r\n        <article className=\"outerbox\">\r\n          <div className=\"row\">\r\n            <Name\r\n              name={eachSlot.name}\r\n              expanded={expanded}\r\n              expandCollapse={expandCollapse}\r\n            />\r\n            <span className=\"rightfloat mright15px\">\r\n              <FaRegFolderOpen\r\n                className=\"icon mright3px\"\r\n                onClick={() => {\r\n                  confirmToggle();\r\n                  setConfirmType({\r\n                    text: `Load this ${props.context}`,\r\n                    type: \"load\",\r\n                  });\r\n                }}\r\n              ></FaRegFolderOpen>\r\n              <FaRegTrashAlt\r\n                className=\"icon mright3px\"\r\n                onClick={() => {\r\n                  //deleteSlot(slot);\r\n                  confirmToggle();\r\n                  setConfirmType({\r\n                    text: `Delete this ${props.context}`,\r\n                    type: \"delete\",\r\n                  });\r\n                }}\r\n              ></FaRegTrashAlt>\r\n            </span>\r\n          </div>\r\n          {expanded === true && (\r\n            <span>\r\n              <hr></hr>\r\n              <Description description={\"(placeholder)\"} />\r\n              <hr></hr>\r\n              {stats.map((stat, index) => {\r\n                return (\r\n                  <div className=\"padded5px\" key={index}>\r\n                    {stat.name}: {eachSlot[stat.value]}\r\n                  </div>\r\n                );\r\n              })}\r\n              <hr></hr>\r\n            </span>\r\n          )}\r\n          {confirm === true && (\r\n            //flex these\r\n            <div>\r\n              <hr></hr>\r\n              <button\r\n                className=\"button bordered padded5px margin5px\"\r\n                onClick={() => {\r\n                  confirmAction();\r\n                }}\r\n              >\r\n                {confirmType.text}\r\n              </button>\r\n              <button\r\n                className=\"button bordered padded5px margin5px\"\r\n                onClick={() => {\r\n                  confirmToggle(confirm);\r\n                }}\r\n              >\r\n                No\r\n              </button>\r\n            </div>\r\n          )}\r\n        </article>\r\n      </Col>\r\n    );\r\n  }\r\n};\r\n\r\nexport default SaveCard;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\SaveModal.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\ExportModal.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\ImportCard.js",["260"],"import React, { useState, useContext } from \"react\";\r\nimport Name from \"../cards/Name\";\r\nimport Description from \"../cards/Description\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { FaFileUpload } from \"react-icons/fa\";\r\nimport Character from \"../data/character.js\";\r\n\r\nconst ImportCard = (props) => {\r\n  const [expanded, setExpanded] = useState(false);\r\n  const [character, setCharacter] = useContext(Character);\r\n  const [importData, setImportData] = useState(\"\");\r\n\r\n  const expandCollapse = (status) => {\r\n    setExpanded(!status);\r\n  };\r\n\r\n  const { name, description } = props;\r\n\r\n  const importJson = (string) => {\r\n    setCharacter(JSON.parse(string));\r\n  };\r\n\r\n  return (\r\n    <Col>\r\n      <article className=\"outerbox\">\r\n        <div className=\"row\">\r\n          <Name\r\n            name={name}\r\n            expanded={expanded}\r\n            expandCollapse={expandCollapse}\r\n          />\r\n          <FaFileUpload\r\n            className=\"rightfloat icon mright24px mtop12px\"\r\n            onClick={() => {\r\n              expandCollapse(expanded);\r\n            }}\r\n          />\r\n        </div>\r\n        {expanded === true && (\r\n          <span>\r\n            <hr></hr>\r\n            <Description description={description} />\r\n            <hr></hr>\r\n            <textarea\r\n              className=\"textarea\"\r\n              name=\"importChar\"\r\n              id=\"importChar\"\r\n              cols=\"40\"\r\n              rows=\"5\"\r\n              onChange={(e) => setImportData(e.target.value)}\r\n            ></textarea>\r\n            <button\r\n              className=\"button bordered padded5px fullwidth\"\r\n              onClick={() => {\r\n                importJson(importData);\r\n              }}\r\n            >\r\n              Import\r\n            </button>\r\n          </span>\r\n        )}\r\n      </article>\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default ImportCard;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\SlotName.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardCreature.js",["261","262","263","264","265"],"import React, { useState, useContext } from \"react\";\r\nimport Name from \"./Name\";\r\nimport Tag from \"./Tag\";\r\nimport AddSubtract from \"./AddSubtract\";\r\nimport NameValuePair from \"./NameValuePair.js\";\r\nimport ModalCreatureAttack from \"./ModalCreatureAttack.js\";\r\nimport ModalCreatureEdit from \"./ModalCreatureEdit.js\";\r\nimport Character from \"../data/character.js\";\r\nimport modsdata from \"../data/collections/modCreatures.json\";\r\nimport architecture from \"../data/architecture.json\";\r\nimport { updateState, toggle } from \"../utils/exports.js\";\r\nimport toaster from \"toasted-notes\";\r\nimport \"toasted-notes/src/styles.css\";\r\n\r\nconst CardCreature = (props) => {\r\n  let ifExpanded = false;\r\n  if (props.expanded) {\r\n    ifExpanded = props.expanded;\r\n  }\r\n  const [expanded, setExpanded] = useState(ifExpanded);\r\n  let cards = require(`../data/collections/creatures`);\r\n  const [attackModalOpen, setAttackModalOpen] = useState(false);\r\n  const [editModalOpen, setEditModalOpen] = useState(false);\r\n  const [character, setCharacter] = useContext(Character);\r\n  const [attackName, setAttackName] = useState(\"\");\r\n  const [attackDamage, setAttackDamage] = useState(\"\");\r\n  const [attackBonus, setAttackBonus] = useState(\"\");\r\n  const [attackStat, setAttackStat] = useState(\"\");\r\n\r\n  //mod becomes mods: []\r\n\r\n  const {\r\n    name,\r\n    level,\r\n    life,\r\n    facets,\r\n    tags,\r\n    description,\r\n    attacks,\r\n    properties,\r\n    modifiers,\r\n  } = cards[props.card.name];\r\n\r\n  const noBreakpointsIfHeroSheet = () => {\r\n    if (props.deleteFrom === \"none\") {\r\n      return \"col-xs-12 col-md-6 col-lg-6 col-xl-4\";\r\n    }\r\n    return \"fullwidth mright15px\";\r\n  };\r\n\r\n  return (\r\n    <div className={noBreakpointsIfHeroSheet()}>\r\n      <article className=\"outerbox\">\r\n        <div className=\"row\">\r\n          <Name\r\n            name={name}\r\n            expanded={expanded}\r\n            expandCollapse={() => {\r\n              toggle(setExpanded, expanded);\r\n            }}\r\n          />\r\n          <span className=\"row rightfloat mright12px mtop4px\">\r\n            {props.context !== \"worldstate\" && (\r\n              <AddSubtract\r\n                context={\"character\"}\r\n                card={props.card}\r\n                form={props.form}\r\n                placement={props.placement}\r\n                deleteFrom={props.deleteFrom}\r\n                category={props.category}\r\n              />\r\n            )}\r\n\r\n            {props.context !== \"character\" && (\r\n              <AddSubtract\r\n                context={\"worldstate\"}\r\n                card={props.card}\r\n                form={props.form}\r\n                placement={props.placement}\r\n                deleteFrom={props.deleteFrom}\r\n                category={props.category}\r\n              />\r\n            )}\r\n          </span>\r\n        </div>\r\n        {expanded === false && props.deleteFrom === \"none\" && (\r\n          <span>\r\n            {tags.map((tag, index) => {\r\n              return <Tag tag={tag} key={index} />;\r\n            })}\r\n          </span>\r\n        )}\r\n        {expanded === true && (\r\n          <span>\r\n            <hr></hr>\r\n            {tags.map((tag, index) => {\r\n              return <Tag tag={tag} key={index} />;\r\n            })}\r\n            <hr></hr>\r\n            {facets.map((facet, index) => {\r\n              return (\r\n                <span key={index}>\r\n                  <i>{facet},</i>{\" \"}\r\n                </span>\r\n              );\r\n            })}\r\n            <div>{description}</div>\r\n            <hr />\r\n            <div>\r\n              Level: {level} | Life:{\" \"}\r\n              {props.card.lifecurrent && (\r\n                <span>{props.card.lifecurrent} /</span>\r\n              )}{\" \"}\r\n              {life}\r\n            </div>\r\n            <hr />\r\n            <div>\r\n              {attacks.map((attack, index) => {\r\n                return (\r\n                  <div key={index}>\r\n                    <span className=\"orangetext\">\r\n                      <i>{architecture.statMasks[attack.defensename]}</i>\r\n                    </span>\r\n                    : {attack.defenseamount} / {attack.bonus}{\" \"}\r\n                    <span\r\n                      className=\"button\"\r\n                      onClick={() => {\r\n                        setAttackModalOpen(true);\r\n                        setAttackName(attack.attackname);\r\n                        setAttackStat(attack.defensename);\r\n                        setAttackBonus(attack.bonus);\r\n                        setAttackDamage(attack.damage);\r\n                      }}\r\n                    >\r\n                      {attack.attackname}\r\n                    </span>{\" \"}\r\n                    {attack.damage}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            <hr></hr>\r\n            <div className=\"margin5x\">\r\n              {properties.map((property, index) => {\r\n                return (\r\n                  <div key={index}>\r\n                    <NameValuePair\r\n                      name={property.name}\r\n                      value={property.description}\r\n                    />\r\n                    <hr />\r\n                  </div>\r\n                );\r\n              })}\r\n              {/* {modifiers.map((mod, index) => {\r\n                let modifier = modsdata[mod];\r\n                return (\r\n                  <div key={index}>\r\n                    <NameValuePair\r\n                      name={modifier.name}\r\n                      value={modifier.description}\r\n                    />\r\n                    <hr />\r\n                  </div>\r\n                );\r\n              })} */}\r\n            </div>\r\n          </span>\r\n        )}\r\n      </article>\r\n      {\r\n        <>\r\n          <ModalCreatureAttack\r\n            attackModalOpen={attackModalOpen}\r\n            setAttackModalOpen={setAttackModalOpen}\r\n            character={character}\r\n            creatureName={name}\r\n            attackName={attackName}\r\n            attackBonus={attackBonus}\r\n            attackDamage={attackDamage}\r\n            attackStat={attackStat}\r\n            creatureProperties={properties}\r\n          />\r\n          <ModalCreatureEdit\r\n            editModalOpen={editModalOpen}\r\n            setEditModalOpen={setEditModalOpen}\r\n            character={character}\r\n            creatureName={name}\r\n            creatureProperties={properties}\r\n          />\r\n        </>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardCreature;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardItem.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardSpell.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalItemAttack.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalItemSale.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalSpellCast.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalCreatureAttack.js",["266"],"import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport architecture from \"../data/architecture.json\";\r\nimport NameValuePair from \"./NameValuePair.js\";\r\nimport toaster from \"toasted-notes\";\r\nimport \"toasted-notes/src/styles.css\";\r\nimport {\r\n  r,\r\n  test,\r\n  damagecalc,\r\n  toggleState,\r\n  toggle,\r\n  withProAdv,\r\n} from \"../utils/exports.js\";\r\n\r\nfunction ModalCreatureAttack(props) {\r\n  const [target, setTarget] = useState(10);\r\n  const [attackResult, setAttackResult] = useState(\"\");\r\n  const [attackMessage, setAttackMessage] = useState(\"\");\r\n  const [attack, setAttack] = useState({ adv: \"\" });\r\n  const [damage, setDamage] = useState({ adv: \"\" });\r\n\r\n  const {\r\n    attackModalOpen,\r\n    setAttackModalOpen,\r\n    creatureName,\r\n    attackName,\r\n    attackBonus,\r\n    attackDamage,\r\n    attackStat,\r\n    creatureProperties,\r\n  } = props;\r\n\r\n  const modularString = (object) => {\r\n    let data = withProAdv(object);\r\n    return (\r\n      <span>\r\n        {data.string} {data.mod}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const confirmAttack = () => {\r\n    let pro = 0;\r\n\r\n    let attackRes = test(target, attack.adv, pro, attackBonus);\r\n    let damageResult = damagecalc(attackDamage, damage.adv);\r\n\r\n    if (attackRes.startsWith(\"Critical S\")) {\r\n      damageResult.total = damageResult.total * 2;\r\n      let critRoll = r(20) + 1;\r\n      if (critRoll === \"20\") {\r\n        damageResult.total = damageResult.total * 2;\r\n        attackRes.concat(\"Double \", attackRes);\r\n      }\r\n    }\r\n    if (\r\n      attackRes.startsWith(\"S\") ||\r\n      attackRes.startsWith(\"B\") ||\r\n      attackRes.startsWith(\"Critical S\")\r\n    ) {\r\n      setAttackResult(\r\n        <div>\r\n          {attackRes} <br /> {damageResult.total} {attackStat} damage dealt!{\" \"}\r\n          {damageResult.explosions !== 0 && (\r\n            <span>(Explosions: {damageResult.explosions})</span>\r\n          )}\r\n        </div>\r\n      );\r\n      let damageAdv = \"\";\r\n      if (damage.adv === \"+\") {\r\n        damageAdv = \" [+] \";\r\n      }\r\n      if (damage.adv === \"-\") {\r\n        damageAdv = \" [-] \";\r\n      }\r\n      let message = `${creatureName} attacks using their ${attackName} ${\r\n        withProAdv(attack).string\r\n      }!\\nThe attack is a ${attackRes}\\n${\r\n        damageResult.total\r\n      } ${attackStat} damage ${damageAdv} dealt!`;\r\n      setAttackMessage(message);\r\n    } else {\r\n      let message = `${creatureName} attacks using their ${attackName}${\r\n        withProAdv(attack).string\r\n      }!\\nThe attack is a ${attackRes}`;\r\n      setAttackResult(attackRes);\r\n      setAttackMessage(message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={attackModalOpen}\r\n      onHide={() => {\r\n        toggle(setAttackModalOpen, attackModalOpen);\r\n      }}\r\n    >\r\n      <Modal.Header className=\"modalbackground\">\r\n        <span className=\"cardname\">Attack using {attackName}!</span>\r\n      </Modal.Header>\r\n      <Modal.Body className=\"modalbackground\">\r\n        <div>Attacker: {creatureName}</div>\r\n        <hr />\r\n        {creatureProperties.map((property, index) => {\r\n          if (property.of !== attackName) return;\r\n          return (\r\n            <div key={index}>\r\n              <NameValuePair\r\n                name={property.name}\r\n                value={property.description}\r\n              />\r\n              <hr />\r\n            </div>\r\n          );\r\n        })}\r\n        <div>\r\n          Attack Bonus{modularString(attack)}: {attackBonus}\r\n        </div>\r\n        <div className=\"flex\">\r\n          <button\r\n            className=\"button bordered padded5px margin5px flexgrow\"\r\n            onClick={() => {\r\n              toggleState(attack, setAttack, \"adv\", \"\", \"-\");\r\n            }}\r\n          >\r\n            [-]\r\n          </button>\r\n          <button\r\n            className=\"button bordered padded5px margin5px flexgrow\"\r\n            onClick={() => {\r\n              toggleState(attack, setAttack, \"adv\", \"\", \"+\");\r\n            }}\r\n          >\r\n            [+]\r\n          </button>\r\n        </div>\r\n        <hr />\r\n        <div>\r\n          Damage{modularString(damage)}: {attackDamage}\r\n        </div>\r\n        <div className=\"flex\">\r\n          <button\r\n            className=\"button bordered padded5px margin5px flexgrow\"\r\n            onClick={() => {\r\n              toggleState(damage, setDamage, \"adv\", \"\", \"-\");\r\n            }}\r\n          >\r\n            [-]\r\n          </button>\r\n          <button\r\n            className=\"button bordered padded5px margin5px flexgrow\"\r\n            onClick={() => {\r\n              toggleState(damage, setDamage, \"adv\", \"\", \"+\");\r\n            }}\r\n          >\r\n            [+]\r\n          </button>\r\n        </div>\r\n        <hr />\r\n        <div>\r\n          Target {architecture.statMasks[attackStat]}: {target}\r\n        </div>\r\n        <div className=\"flex\">\r\n          <button\r\n            className=\"button bordered padded5px margin5px flexgrow\"\r\n            onClick={() => {\r\n              setTarget(target - 1);\r\n            }}\r\n          >\r\n            -1\r\n          </button>\r\n          <button\r\n            className=\"button bordered padded5px margin5px flexgrow\"\r\n            onClick={() => {\r\n              setTarget(target + 1);\r\n            }}\r\n          >\r\n            +1\r\n          </button>\r\n        </div>\r\n        <hr />\r\n        <div className=\"flex\">\r\n          <button\r\n            className=\"button bordered padded5px margin5px flexgrow\"\r\n            onClick={() => {\r\n              confirmAttack();\r\n            }}\r\n          >\r\n            Confirm Attack\r\n          </button>\r\n        </div>\r\n        {attackResult !== \"\" && (\r\n          <div>\r\n            <hr />\r\n            <div\r\n              className=\"button padded5px\"\r\n              onClick={() => {\r\n                toaster.notify(\"Attack text copied to clipboard!\", {\r\n                  duration: 1000,\r\n                });\r\n                navigator.clipboard.writeText(attackMessage);\r\n              }}\r\n            >\r\n              {attackResult}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default ModalCreatureAttack;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalCreatureEdit.js",["267","268","269","270","271","272","273","274"],"import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport architecture from \"../data/architecture.json\";\r\nimport NameValuePair from \"./NameValuePair.js\";\r\nimport toaster from \"toasted-notes\";\r\nimport \"toasted-notes/src/styles.css\";\r\nimport {\r\n  r,\r\n  test,\r\n  damagecalc,\r\n  toggleState,\r\n  toggle,\r\n  withProAdv,\r\n} from \"../data/exports.js\";\r\n\r\nfunction ModalCreatureEdit(props) {\r\n  const { editModalOpen, setEditModalOpen, creatureName, creatureProperties } =\r\n    props;\r\n\r\n  return (\r\n    <Modal\r\n      show={editModalOpen}\r\n      onHide={() => {\r\n        toggle(setEditModalOpen, editModalOpen);\r\n      }}\r\n    >\r\n      <Modal.Header className=\"modalbackground\">\r\n        <span className=\"cardname\">Edit {creatureName}!</span>\r\n      </Modal.Header>\r\n      <Modal.Body className=\"modalbackground\">\r\n        {creatureProperties.map((property, index) => {\r\n          return (\r\n            <div key={index}>\r\n              <NameValuePair\r\n                name={property.name}\r\n                value={property.description}\r\n              />\r\n              <hr />\r\n            </div>\r\n          );\r\n        })}\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default ModalCreatureEdit;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardProp.js",["275","276","277","278"],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalCardDisplay.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\utils\\exports.js",["279","280"],"import architecture from \"../data/architecture.json\";\r\n\r\n/*\r\n1. Utility\r\n2. Combat\r\n3. Tests\r\n4. Status\r\n*/\r\n\r\n/*\r\n------------------------------------------------------------------\r\n  UTILITY\r\n------------------------------------------------------------------\r\n*/\r\n\r\nconst r = function (c) {\r\n  return Math.floor(Math.random() * c);\r\n};\r\n\r\nconst s = function (array) {\r\n  return array[r(array.length)];\r\n};\r\n\r\nconst multiRoll = (value) => {\r\n  let total = 0;\r\n  let ifexploding = value.slice(-1);\r\n  if (ifexploding === \"*\") {\r\n    value = value.slice(0, -1);\r\n  }\r\n  let dice = value.split(\"d\");\r\n  let times = parseInt(dice[0]);\r\n  let size = parseInt(dice[1]);\r\n  for (let i = 0; i < times; i++) {\r\n    let subtotal = 0;\r\n    let result = r(size) + 1;\r\n    subtotal += result;\r\n    if (result === size && ifexploding === \"*\") {\r\n      console.log(\"BOOM\");\r\n      while (true) {\r\n        let newresult = r(size) + 1;\r\n        subtotal += newresult;\r\n        if (newresult !== size) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    total += subtotal;\r\n  }\r\n  return total;\r\n};\r\n\r\nconst updateState = (object, method, property, value) => {\r\n  let object2 = object;\r\n  object2[property] = value;\r\n  method(JSON.parse(JSON.stringify(object2)));\r\n};\r\n\r\nconst toggleState = (object, method, property, value, togglevalue) => {\r\n  if (object[property] === value) {\r\n    updateState(object, method, property, togglevalue);\r\n  } else {\r\n    updateState(object, method, property, value);\r\n  }\r\n};\r\n\r\nconst toggle = (method, status) => {\r\n  method(!status);\r\n};\r\n\r\n/*\r\n------------------------------------------------------------------\r\n  COMBAT\r\n------------------------------------------------------------------\r\n*/\r\n\r\nconst rdamage = (string) => {\r\n  let split = string.split(\"d\");\r\n\r\n  let base = r(split[split.length - 1]) + 1;\r\n  let nug = split.pop();\r\n  if (split.length > 1) {\r\n    base = base * r(split[split.length - 1]) + 1;\r\n  } else {\r\n    base = base * split[split.length - 1];\r\n  }\r\n  nug = split.pop();\r\n  if (split.length > 0) {\r\n    base = base * split[split.length - 1];\r\n  }\r\n\r\n  return base;\r\n};\r\n\r\nconst damage = (string) => {\r\n  let exploding = false;\r\n  let explosions = 0;\r\n  if (string.substr(string.length - 1) === \"*\") {\r\n    exploding = true;\r\n    string = string.slice(0, -1);\r\n  }\r\n  let total = 0;\r\n  let dice = string.split(\"d\");\r\n  let times = parseInt(dice[0]);\r\n  let size = parseInt(dice[1]);\r\n  for (let i = 0; i < times; i++) {\r\n    let subtotal = 0;\r\n    let result = r(size) + 1;\r\n    subtotal += result;\r\n    //exploding dice\r\n    if (result === size && exploding === true) {\r\n      console.log(\"BOOM\");\r\n      while (true) {\r\n        explosions += 1;\r\n        let newresult = r(size) + 1;\r\n        subtotal += newresult;\r\n        if (newresult !== size) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    total += subtotal;\r\n  }\r\n  return { total: total, explosions: explosions };\r\n};\r\n\r\nconst damagecalc = (string, adv) => {\r\n  let result1;\r\n  let result2;\r\n  if (adv !== \"\") {\r\n    result1 = damage(string);\r\n    result2 = damage(string);\r\n  } else {\r\n    result1 = damage(string);\r\n  }\r\n\r\n  if (adv === \"+\") {\r\n    if (result1.total > result2.total) {\r\n      return result1;\r\n    }\r\n    return result2;\r\n  }\r\n  if (adv === \"-\") {\r\n    if (result1.total < result2.total) {\r\n      return result1;\r\n    }\r\n    return result2;\r\n  }\r\n  return result1;\r\n};\r\n\r\n/*\r\n------------------------------------------------------------------\r\n  TESTS\r\n------------------------------------------------------------------\r\n*/\r\n\r\nconst calcSale = (value) => {\r\n  let valuesplit = value.split(\"x\");\r\n  let roll = multiRoll(valuesplit[0]);\r\n  return roll * parseInt(valuesplit[1]);\r\n};\r\n\r\nconst minitest = (pro, stat) => {\r\n  return r(20) + pro + stat;\r\n};\r\n\r\nconst roll = (adv, pro) => {\r\n  let result = 0;\r\n  let total = 0;\r\n  let text = \"\";\r\n  if (adv === \"+\") {\r\n    let roll1 = r(20) + 1;\r\n    let roll2 = r(20) + 1;\r\n    result = Math.max(roll1, roll2);\r\n    text = \"Results: \" + roll1 + \", \" + roll2;\r\n  } else if (adv === \"-\") {\r\n    let roll1 = r(20) + 1;\r\n    let roll2 = r(20) + 1;\r\n    result = Math.min(roll1, roll2);\r\n    text = \"Results: \" + roll1 + \", \" + roll2;\r\n  } else {\r\n    result = r(20) + 1;\r\n    text = \"Result: \" + result;\r\n  }\r\n  if (pro !== 0) {\r\n    total = result + pro;\r\n  } else {\r\n    total = result;\r\n  }\r\n  return { result: result, total: total, text: text };\r\n};\r\n\r\nconst test = (target, adv, pro, mod) => {\r\n  let rollData = roll(adv, pro);\r\n  let rollResult = rollData.result;\r\n  let rollTotal = parseInt(rollData.total) + parseInt(mod);\r\n  let resultString = \"\";\r\n  if (rollResult === 20 || rollResult === 1) {\r\n    resultString += \"Critical \";\r\n  }\r\n  if (rollTotal === target) {\r\n    resultString += \"Barely a \";\r\n  }\r\n  if (rollTotal >= target) {\r\n    resultString += \"Success\";\r\n  } else {\r\n    resultString += \"Failure\";\r\n  }\r\n  if (rollResult === 7 && rollTotal <= target) {\r\n    resultString += \" with a Silver Lining\";\r\n  }\r\n  if (rollResult === 13 && rollTotal >= target) {\r\n    resultString += \" with a Drawback\";\r\n  }\r\n\r\n  resultString += \"! \" + rollData.text + \". Total: \" + rollTotal + \".\";\r\n  return resultString;\r\n};\r\n\r\nconst haggleRoll = (result, mode) => {\r\n  let multiplier = 1;\r\n  let add = (result - 15) * 0.05;\r\n  if (mode === \"none\") {\r\n    //buying\r\n    multiplier -= add;\r\n  }\r\n  if (mode === \"items\") {\r\n    //selling\r\n    multiplier += add;\r\n  }\r\n  return multiplier;\r\n};\r\n\r\n/*\r\n------------------------------------------------------------------\r\n  STATUS\r\n------------------------------------------------------------------\r\n*/\r\n\r\nconst withProAdv = (object) => {\r\n  let string = \"\";\r\n  let mod = \"\";\r\n  if (object.pro !== undefined) {\r\n    if (object.pro !== \"\" || object.adv !== \"\") {\r\n      string += \" with \";\r\n    }\r\n    if (object.pro === \"single\") {\r\n      string += \"Proficiency\";\r\n    }\r\n    if (object.pro === \"double\") {\r\n      string += \"Double Proficiency\";\r\n    }\r\n    if (object.pro !== \"\" && object.adv !== \"\") {\r\n      string += \" and \";\r\n    }\r\n  } else if (object.adv !== \"\") {\r\n    string += \" with \";\r\n  }\r\n  if (object.adv === \"+\") {\r\n    string += \"Advantage\";\r\n    mod = \" [+]\";\r\n  }\r\n  if (object.adv === \"-\") {\r\n    string += \"Disadvantage\";\r\n    mod = \" [-]\";\r\n  }\r\n  return { string: string, mod: mod };\r\n};\r\n\r\nconst invcalc = (encumbrance, placement, placement2) => {\r\n  return encumbrance.toString().slice(placement, placement2);\r\n};\r\n\r\nconst sackstonesoap = (weight, mode) => {\r\n  let encumbrance = weight;\r\n  let soaps = invcalc(encumbrance, -1);\r\n  let stones = invcalc(encumbrance, -2, -1);\r\n  let sacks = invcalc(encumbrance, -3, -2);\r\n  let array = [\r\n    { amount: sacks, name: \"Sacks\" },\r\n    { amount: stones, name: \"Stones\" },\r\n    { amount: soaps, name: \"Soaps\" },\r\n  ];\r\n  let sackstonesoap = \"\";\r\n  for (let i = 0; i < array.length; i++) {\r\n    let element = array[i];\r\n    let amount = parseInt(element.amount);\r\n    if (amount === 0 || amount === \"\" || amount !== amount) {\r\n      if (mode === \"inventory\") {\r\n        sackstonesoap += \" 0 \" + element.name;\r\n        if (i !== array.length - 1) {\r\n          sackstonesoap += \", \";\r\n        }\r\n      }\r\n    } else {\r\n      sackstonesoap += element.amount + \" \" + element.name;\r\n      if (i < array.length - 1) {\r\n        if (parseInt(array[i + 1].amount) !== 0) {\r\n          sackstonesoap += \", \";\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return sackstonesoap;\r\n};\r\n\r\nconst messageStats = (stat) => {\r\n  return (\r\n    <span>\r\n      {stat.map((eachstat, index) => {\r\n        return (\r\n          <span key={index}>\r\n            <i>{architecture.statMasks[eachstat]}</i>\r\n            {index < 0 && index > stat.length && <span> or </span>}\r\n          </span>\r\n        );\r\n      })}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport {\r\n  r,\r\n  s,\r\n  rdamage,\r\n  multiRoll,\r\n  damagecalc,\r\n  calcSale,\r\n  roll,\r\n  minitest,\r\n  test,\r\n  haggleRoll,\r\n  sackstonesoap,\r\n  updateState,\r\n  toggleState,\r\n  toggle,\r\n  withProAdv,\r\n  messageStats,\r\n};\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalTableDisplay.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardScene.js",["281","282","283","284","285"],"import React, { useState, useContext } from \"react\";\r\nimport Name from \"./Name\";\r\nimport Tag from \"./Tag\";\r\nimport Flavor from \"./Flavor\";\r\nimport Description from \"./Description\";\r\nimport AddSubtract from \"./AddSubtract\";\r\nimport Context from \"../data/context\";\r\nimport Table from \"./Table\";\r\n\r\nconst Card = (props) => {\r\n  let ifExpanded = false;\r\n  if (props.expanded) {\r\n    ifExpanded = props.expanded;\r\n  }\r\n  const [expanded, setExpanded] = useState(ifExpanded);\r\n  const [context] = useContext(Context);\r\n  let cards;\r\n  if (props.deleteFrom !== \"none\") {\r\n    cards = require(`../data/collections/` + props.deleteFrom);\r\n  } else {\r\n    cards = require(`../data/collections/` + context.collections);\r\n  }\r\n\r\n  const expandCollapse = (status) => {\r\n    setExpanded(!status);\r\n  };\r\n  const { name, tags, flavor, description, actions } = cards[props.card.name];\r\n\r\n  let savedresult = undefined;\r\n  if (props.card.savedresult !== undefined) {\r\n    savedresult = props.card.savedresult;\r\n  }\r\n\r\n  const noBreakpointsIfHeroSheet = () => {\r\n    if (props.deleteFrom === \"none\") {\r\n      return \"col-xs-12 col-md-6 col-lg-6 col-xl-4\";\r\n    }\r\n    return \"fullwidth mright15px\";\r\n  };\r\n\r\n  return (\r\n    <div className={noBreakpointsIfHeroSheet()}>\r\n      <div className=\"outerbox\">\r\n        <div className=\"row\">\r\n          <Name\r\n            name={name}\r\n            expanded={expanded}\r\n            expandCollapse={expandCollapse}\r\n          />\r\n          <span className=\"rightfloat mtop4px mright12px\">\r\n            <AddSubtract\r\n              context={\"worldstate\"}\r\n              card={props.card}\r\n              form={props.form}\r\n              placement={props.placement}\r\n              deleteFrom={props.deleteFrom}\r\n              category={props.category}\r\n            />\r\n          </span>\r\n        </div>\r\n        {expanded === false && props.deleteFrom === \"none\" && (\r\n          <span>\r\n            {tags.map((tag, index) => {\r\n              return <Tag tag={tag} key={index} />;\r\n            })}\r\n          </span>\r\n        )}\r\n        {expanded === true && (\r\n          <span>\r\n            <hr></hr>\r\n            {tags.map((tag, index) => {\r\n              return <Tag tag={tag} key={index} />;\r\n            })}\r\n            {description !== undefined && (\r\n              <div>\r\n                <Description description={description} />\r\n              </div>\r\n            )}\r\n            <hr></hr>\r\n            {/* {actions !== undefined && (\r\n              <div>\r\n                Actions:{\" \"}\r\n                <Table\r\n                  table={actions}\r\n                  savedresult={savedresult}\r\n                  placement={props.placement}\r\n                  category={props.category}\r\n                />\r\n              </div>\r\n            )} */}\r\n          </span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardEnvironment.js",["286"],"import React, { useState, useContext } from \"react\";\r\nimport Name from \"./Name\";\r\nimport Tag from \"./Tag\";\r\nimport Flavor from \"./Flavor\";\r\nimport Description from \"./Description\";\r\nimport AddSubtract from \"./AddSubtract\";\r\nimport Context from \"../data/context\";\r\nimport Table from \"./Table\";\r\n\r\nconst Card = (props) => {\r\n  let ifExpanded = false;\r\n  if (props.expanded) {\r\n    ifExpanded = props.expanded;\r\n  }\r\n  const [expanded, setExpanded] = useState(ifExpanded);\r\n  const [context] = useContext(Context);\r\n  let cards;\r\n  if (props.deleteFrom !== \"none\") {\r\n    cards = require(`../data/collections/` + props.deleteFrom);\r\n  } else {\r\n    cards = require(`../data/collections/` + context.collections);\r\n  }\r\n\r\n  const expandCollapse = (status) => {\r\n    setExpanded(!status);\r\n  };\r\n  const {\r\n    name,\r\n    tags,\r\n    flavor,\r\n    description,\r\n    conditions,\r\n    denizens,\r\n    events,\r\n    resources,\r\n    zones,\r\n    connections,\r\n  } = cards[props.card.name];\r\n\r\n  let savedresult = undefined;\r\n  if (props.card.savedresult !== undefined) {\r\n    savedresult = props.card.savedresult;\r\n  }\r\n\r\n  const noBreakpointsIfHeroSheet = () => {\r\n    if (props.deleteFrom === \"none\") {\r\n      return \"col-xs-12 col-md-6 col-lg-6 col-xl-4\";\r\n    }\r\n    return \"fullwidth mright15px\";\r\n  };\r\n\r\n  return (\r\n    <div className={noBreakpointsIfHeroSheet()}>\r\n      <div className=\"outerbox\">\r\n        <div className=\"row\">\r\n          <Name\r\n            name={name}\r\n            expanded={expanded}\r\n            expandCollapse={expandCollapse}\r\n          />\r\n          <span className=\"rightfloat mtop4px mright12px\">\r\n            <AddSubtract\r\n              context={\"worldstate\"}\r\n              card={props.card}\r\n              form={props.form}\r\n              placement={props.placement}\r\n              deleteFrom={props.deleteFrom}\r\n              category={props.category}\r\n            />\r\n          </span>\r\n        </div>\r\n        {expanded === false && props.deleteFrom === \"none\" && (\r\n          <span>\r\n            {tags.map((tag, index) => {\r\n              return <Tag tag={tag} key={index} />;\r\n            })}\r\n          </span>\r\n        )}\r\n        {expanded === true && (\r\n          <span>\r\n            <hr></hr>\r\n            {tags.map((tag, index) => {\r\n              return <Tag tag={tag} key={index} />;\r\n            })}\r\n            <Flavor flavor={flavor} />\r\n            {description !== undefined && (\r\n              <Description description={description} />\r\n            )}\r\n            <hr></hr>\r\n            {conditions !== undefined && (\r\n              <div>\r\n                Conditions:{\" \"}\r\n                <Table\r\n                  table={conditions}\r\n                  savedresult={savedresult}\r\n                  placement={props.placement}\r\n                  category={props.category}\r\n                />\r\n              </div>\r\n            )}\r\n            {denizens !== undefined && (\r\n              <div>\r\n                Denizens:{\" \"}\r\n                <Table\r\n                  table={denizens}\r\n                  savedresult={savedresult}\r\n                  placement={props.placement}\r\n                  category={props.category}\r\n                />\r\n              </div>\r\n            )}\r\n            {events !== undefined && (\r\n              <div>\r\n                Events:{\" \"}\r\n                <Table\r\n                  table={events}\r\n                  savedresult={savedresult}\r\n                  placement={props.placement}\r\n                  category={props.category}\r\n                />\r\n              </div>\r\n            )}\r\n            {resources !== undefined && (\r\n              <div>\r\n                Resources:{\" \"}\r\n                <Table\r\n                  table={resources}\r\n                  savedresult={savedresult}\r\n                  placement={props.placement}\r\n                  category={props.category}\r\n                />\r\n              </div>\r\n            )}\r\n            {zones !== undefined && (\r\n              <div>\r\n                Zones:{\" \"}\r\n                <Table\r\n                  table={zones}\r\n                  savedresult={savedresult}\r\n                  placement={props.placement}\r\n                  category={props.category}\r\n                />\r\n              </div>\r\n            )}\r\n          </span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalPropAction.js",["287"],{"ruleId":"288","replacedBy":"289"},{"ruleId":"290","replacedBy":"291"},{"ruleId":"292","severity":1,"message":"293","line":15,"column":49,"nodeType":"294","messageId":"295","endLine":15,"endColumn":51},{"ruleId":"292","severity":1,"message":"296","line":22,"column":38,"nodeType":"294","messageId":"297","endLine":22,"endColumn":40},{"ruleId":"292","severity":1,"message":"296","line":30,"column":11,"nodeType":"298","messageId":"299","endLine":30,"endColumn":18},{"ruleId":"300","severity":1,"message":"301","line":39,"column":9,"nodeType":"302","messageId":"303","endLine":39,"endColumn":13},{"ruleId":"300","severity":1,"message":"304","line":30,"column":14,"nodeType":"302","messageId":"303","endLine":30,"endColumn":21},{"ruleId":"305","severity":1,"message":"306","line":12,"column":5,"nodeType":"307","messageId":"308","endLine":28,"endColumn":6},{"ruleId":"292","severity":1,"message":"293","line":39,"column":47,"nodeType":"294","messageId":"295","endLine":39,"endColumn":49},{"ruleId":"292","severity":1,"message":"296","line":46,"column":42,"nodeType":"294","messageId":"297","endLine":46,"endColumn":44},{"ruleId":"292","severity":1,"message":"296","line":53,"column":11,"nodeType":"298","messageId":"299","endLine":53,"endColumn":18},{"ruleId":"300","severity":1,"message":"309","line":12,"column":10,"nodeType":"302","messageId":"303","endLine":12,"endColumn":19},{"ruleId":"300","severity":1,"message":"310","line":15,"column":10,"nodeType":"302","messageId":"303","endLine":15,"endColumn":21},{"ruleId":"305","severity":1,"message":"306","line":14,"column":5,"nodeType":"307","messageId":"308","endLine":55,"endColumn":6},{"ruleId":"300","severity":1,"message":"311","line":3,"column":28,"nodeType":"302","messageId":"303","endLine":3,"endColumn":37},{"ruleId":"300","severity":1,"message":"312","line":4,"column":10,"nodeType":"302","messageId":"303","endLine":4,"endColumn":17},{"ruleId":"305","severity":1,"message":"306","line":36,"column":5,"nodeType":"307","messageId":"308","endLine":45,"endColumn":6},{"ruleId":"300","severity":1,"message":"309","line":10,"column":10,"nodeType":"302","messageId":"303","endLine":10,"endColumn":19},{"ruleId":"300","severity":1,"message":"313","line":9,"column":8,"nodeType":"302","messageId":"303","endLine":9,"endColumn":16},{"ruleId":"300","severity":1,"message":"314","line":11,"column":10,"nodeType":"302","messageId":"303","endLine":11,"endColumn":21},{"ruleId":"300","severity":1,"message":"315","line":12,"column":8,"nodeType":"302","messageId":"303","endLine":12,"endColumn":15},{"ruleId":"300","severity":1,"message":"316","line":24,"column":21,"nodeType":"302","messageId":"303","endLine":24,"endColumn":33},{"ruleId":"300","severity":1,"message":"317","line":41,"column":5,"nodeType":"302","messageId":"303","endLine":41,"endColumn":14},{"ruleId":"292","severity":1,"message":"296","line":106,"column":43,"nodeType":"298","messageId":"299","endLine":106,"endColumn":50},{"ruleId":"300","severity":1,"message":"318","line":1,"column":17,"nodeType":"302","messageId":"303","endLine":1,"endColumn":25},{"ruleId":"300","severity":1,"message":"319","line":3,"column":8,"nodeType":"302","messageId":"303","endLine":3,"endColumn":20},{"ruleId":"300","severity":1,"message":"315","line":5,"column":8,"nodeType":"302","messageId":"303","endLine":5,"endColumn":15},{"ruleId":"300","severity":1,"message":"320","line":8,"column":3,"nodeType":"302","messageId":"303","endLine":8,"endColumn":4},{"ruleId":"300","severity":1,"message":"321","line":9,"column":3,"nodeType":"302","messageId":"303","endLine":9,"endColumn":7},{"ruleId":"300","severity":1,"message":"322","line":10,"column":3,"nodeType":"302","messageId":"303","endLine":10,"endColumn":13},{"ruleId":"300","severity":1,"message":"323","line":11,"column":3,"nodeType":"302","messageId":"303","endLine":11,"endColumn":14},{"ruleId":"300","severity":1,"message":"324","line":13,"column":3,"nodeType":"302","messageId":"303","endLine":13,"endColumn":13},{"ruleId":"300","severity":1,"message":"325","line":4,"column":8,"nodeType":"302","messageId":"303","endLine":4,"endColumn":14},{"ruleId":"300","severity":1,"message":"326","line":8,"column":8,"nodeType":"302","messageId":"303","endLine":8,"endColumn":13},{"ruleId":"300","severity":1,"message":"327","line":29,"column":23,"nodeType":"302","messageId":"303","endLine":29,"endColumn":29},{"ruleId":"300","severity":1,"message":"328","line":34,"column":5,"nodeType":"302","messageId":"303","endLine":34,"endColumn":16},{"ruleId":"300","severity":1,"message":"329","line":86,"column":3,"nodeType":"302","messageId":"303","endLine":86,"endColumn":6},{"ruleId":"330","severity":1,"message":"331","line":288,"column":42,"nodeType":"332","messageId":"333","endLine":288,"endColumn":59},{"ruleId":"300","severity":1,"message":"325","line":4,"column":8,"nodeType":"302","messageId":"303","endLine":4,"endColumn":14},{"ruleId":"300","severity":1,"message":"326","line":8,"column":8,"nodeType":"302","messageId":"303","endLine":8,"endColumn":13},{"ruleId":"300","severity":1,"message":"327","line":27,"column":23,"nodeType":"302","messageId":"303","endLine":27,"endColumn":29},{"ruleId":"300","severity":1,"message":"334","line":27,"column":44,"nodeType":"302","messageId":"303","endLine":27,"endColumn":51},{"ruleId":"300","severity":1,"message":"328","line":31,"column":5,"nodeType":"302","messageId":"303","endLine":31,"endColumn":16},{"ruleId":"300","severity":1,"message":"335","line":37,"column":5,"nodeType":"302","messageId":"303","endLine":37,"endColumn":16},{"ruleId":"300","severity":1,"message":"336","line":4,"column":10,"nodeType":"302","messageId":"303","endLine":4,"endColumn":19},"no-native-reassign",["337"],"no-negated-in-lhs",["338"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","expectedInside","ReturnStatement","expectedReturnValue","no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'element' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'character' is assigned a value but never used.","'currentStat' is assigned a value but never used.","'Herosheet' is defined but never used.","'FaGlobe' is defined but never used.","'modsdata' is defined but never used.","'updateState' is defined but never used.","'toaster' is defined but never used.","'setCharacter' is assigned a value but never used.","'modifiers' is assigned a value but never used.","'useState' is defined but never used.","'architecture' is defined but never used.","'r' is defined but never used.","'test' is defined but never used.","'damagecalc' is defined but never used.","'toggleState' is defined but never used.","'withProAdv' is defined but never used.","'Flavor' is defined but never used.","'Table' is defined but never used.","'flavor' is assigned a value but never used.","'savedresult' is assigned a value but never used.","'nug' is assigned a value but never used.","no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf","'actions' is assigned a value but never used.","'connections' is assigned a value but never used.","'FaListAlt' is defined but never used.","no-global-assign","no-unsafe-negation"]