[{"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\index.js":"1","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\App.js":"2","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\data\\context.js":"3","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\data\\character.js":"4","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\navigation\\NavMaster.js":"5","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\Error.js":"6","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\Collections.js":"7","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\HeroSheet.js":"8","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\navigation\\Linklet.js":"9","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\navigation\\Navbar.js":"10","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardList.js":"11","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Search.js":"12","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\StatSheet.js":"13","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\RandomCharModal.js":"14","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Stats.js":"15","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Resources.js":"16","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Attributes.js":"17","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\RandomCharCard.js":"18","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Defenses.js":"19","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\navigation\\Navlet.js":"20","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Card.js":"21","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\RollCard.js":"22","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Defense.js":"23","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Name.js":"24","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\NameValuePair.js":"25","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Description.js":"26","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Stat.js":"27","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Flavor.js":"28","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Tag.js":"29","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Table.js":"30","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Ranks.js":"31","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\AddSubtract.js":"32","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\SpellCostCard.js":"33","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\data\\worldstate.js":"34","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\WorldSheet.js":"35","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\ExportCard.js":"36","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\SaveCard.js":"37","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\SaveModal.js":"38","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\ExportModal.js":"39","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\ImportCard.js":"40","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\SlotName.js":"41","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardCreature.js":"42","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardItem.js":"43","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardSpell.js":"44","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalItemAttack.js":"45","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalItemSale.js":"46","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardExpedition.js":"47","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalSpellCast.js":"48","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalCreatureAttack.js":"49","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalCreatureEdit.js":"50","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardProp.js":"51","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalCardDisplay.js":"52","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\utils\\exports.js":"53","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalTableDisplay.js":"54"},{"size":219,"mtime":1632191871752,"results":"55","hashOfConfig":"56"},{"size":2360,"mtime":1638421714159,"results":"57","hashOfConfig":"56"},{"size":101,"mtime":1632191871807,"results":"58","hashOfConfig":"56"},{"size":105,"mtime":1632191871874,"results":"59","hashOfConfig":"56"},{"size":1560,"mtime":1638422361012,"results":"60","hashOfConfig":"56"},{"size":793,"mtime":1637277561777,"results":"61","hashOfConfig":"56"},{"size":2303,"mtime":1638915255093,"results":"62","hashOfConfig":"56"},{"size":4195,"mtime":1638915259333,"results":"63","hashOfConfig":"56"},{"size":1632,"mtime":1638421637686,"results":"64","hashOfConfig":"56"},{"size":581,"mtime":1636776144120,"results":"65","hashOfConfig":"56"},{"size":2936,"mtime":1636927276218,"results":"66","hashOfConfig":"56"},{"size":3675,"mtime":1638915210481,"results":"67","hashOfConfig":"56"},{"size":389,"mtime":1632191873452,"results":"68","hashOfConfig":"56"},{"size":5013,"mtime":1638915249885,"results":"69","hashOfConfig":"56"},{"size":4455,"mtime":1637298486446,"results":"70","hashOfConfig":"56"},{"size":5251,"mtime":1637298461765,"results":"71","hashOfConfig":"56"},{"size":8278,"mtime":1637298687082,"results":"72","hashOfConfig":"56"},{"size":2070,"mtime":1638589491231,"results":"73","hashOfConfig":"56"},{"size":5639,"mtime":1638915219771,"results":"74","hashOfConfig":"56"},{"size":2755,"mtime":1638590226383,"results":"75","hashOfConfig":"56"},{"size":3444,"mtime":1638915166044,"results":"76","hashOfConfig":"56"},{"size":1165,"mtime":1632191873415,"results":"77","hashOfConfig":"56"},{"size":1169,"mtime":1638915215176,"results":"78","hashOfConfig":"56"},{"size":336,"mtime":1632191872597,"results":"79","hashOfConfig":"56"},{"size":287,"mtime":1632191872938,"results":"80","hashOfConfig":"56"},{"size":165,"mtime":1632191872837,"results":"81","hashOfConfig":"56"},{"size":513,"mtime":1637298461763,"results":"82","hashOfConfig":"56"},{"size":181,"mtime":1632191872692,"results":"83","hashOfConfig":"56"},{"size":700,"mtime":1632191872580,"results":"84","hashOfConfig":"56"},{"size":2265,"mtime":1638589068539,"results":"85","hashOfConfig":"56"},{"size":2776,"mtime":1632191872674,"results":"86","hashOfConfig":"56"},{"size":3025,"mtime":1638915150604,"results":"87","hashOfConfig":"56"},{"size":2844,"mtime":1638589481990,"results":"88","hashOfConfig":"56"},{"size":107,"mtime":1632871266663,"results":"89","hashOfConfig":"56"},{"size":2158,"mtime":1638664558635,"results":"90","hashOfConfig":"56"},{"size":1319,"mtime":1632873582738,"results":"91","hashOfConfig":"56"},{"size":4181,"mtime":1637298486420,"results":"92","hashOfConfig":"56"},{"size":4345,"mtime":1636062507566,"results":"93","hashOfConfig":"56"},{"size":7800,"mtime":1638915223473,"results":"94","hashOfConfig":"56"},{"size":1853,"mtime":1632877517198,"results":"95","hashOfConfig":"56"},{"size":2199,"mtime":1632879318114,"results":"96","hashOfConfig":"56"},{"size":6395,"mtime":1638915172534,"results":"97","hashOfConfig":"56"},{"size":8484,"mtime":1638915181534,"results":"98","hashOfConfig":"56"},{"size":4673,"mtime":1638915197106,"results":"99","hashOfConfig":"56"},{"size":8404,"mtime":1638589464515,"results":"100","hashOfConfig":"56"},{"size":3517,"mtime":1638589475722,"results":"101","hashOfConfig":"56"},{"size":4335,"mtime":1638915177181,"results":"102","hashOfConfig":"56"},{"size":1613,"mtime":1637277561846,"results":"103","hashOfConfig":"56"},{"size":6109,"mtime":1638589450286,"results":"104","hashOfConfig":"56"},{"size":1231,"mtime":1637277561778,"results":"105","hashOfConfig":"56"},{"size":2855,"mtime":1638915185790,"results":"106","hashOfConfig":"56"},{"size":3061,"mtime":1638589219595,"results":"107","hashOfConfig":"56"},{"size":7993,"mtime":1637277792192,"results":"108","hashOfConfig":"56"},{"size":1395,"mtime":1638589976256,"results":"109","hashOfConfig":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"zh4rwq",{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"112"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"112"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"112"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"112"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"112"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"112"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"112"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\index.js",[],["226","227"],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\App.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\data\\context.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\data\\character.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\navigation\\NavMaster.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\Error.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\Collections.js",["228","229","230","231"],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\HeroSheet.js",["232"],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\navigation\\Linklet.js",["233"],"import React, { useContext } from \"react\";\r\nimport Context from \"../data/context.js\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ReactComponent as Collections } from \"../data/icons/collections.svg\";\r\nimport { ReactComponent as Herosheet } from \"../data/icons/herosheet.svg\";\r\nimport { FaGlobe } from \"react-icons/fa\";\r\n\r\nconst Linklet = (props) => {\r\n  const [context, setContext] = useContext(Context);\r\n\r\n  const displayIcon = () => {\r\n    switch (props.type) {\r\n      case \"collections\":\r\n        if (context.link === props.type) {\r\n          return <Collections className=\"iconsvgselected\" />;\r\n        }\r\n        return <Collections className=\"iconsvg\" />;\r\n      case \"herosheet\":\r\n        if (context.link === props.type) {\r\n          return <Herosheet className=\"iconsvgselected\" />;\r\n        }\r\n        return <Herosheet className=\"iconsvg\" />;\r\n      case \"worldsheet\":\r\n        if (context.link === props.type) {\r\n          return <FaGlobe className=\"pbottom5px\" />;\r\n        }\r\n        return <FaGlobe className=\"pbottom5px\" />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Link\r\n      className={\r\n        context.link === props.type\r\n          ? \"link button--selected bordered\"\r\n          : \"link button bordered\"\r\n      }\r\n      onClick={() =>\r\n        setContext(() => {\r\n          let newcontext = context;\r\n          newcontext.link = props.type;\r\n          let final = JSON.parse(JSON.stringify(newcontext));\r\n          return final;\r\n        })\r\n      }\r\n      to={props.link}\r\n    >\r\n      {displayIcon()}\r\n      <span className=\"navletSpan\">{props.text}</span>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default Linklet;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\navigation\\Navbar.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardList.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Search.js",["234","235","236"],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\StatSheet.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\RandomCharModal.js",["237"],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Stats.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Resources.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Attributes.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\RandomCharCard.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Defenses.js",["238"],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\navigation\\Navlet.js",["239"],"import React, { useContext } from \"react\";\r\nimport Context from \"../data/context.js\";\r\nimport { ReactComponent as Items } from \"../data/icons/items.svg\";\r\nimport { ReactComponent as Skills } from \"../data/icons/skills.svg\";\r\nimport { ReactComponent as Traits } from \"../data/icons/traits.svg\";\r\nimport { ReactComponent as Spells } from \"../data/icons/magic.svg\";\r\nimport { ReactComponent as Creatures } from \"../data/icons/creatures.svg\";\r\nimport { FaTree, FaPuzzlePiece } from \"react-icons/fa\";\r\n\r\nconst Navlet = (props) => {\r\n  const [context, setContext] = useContext(Context);\r\n\r\n  const displayIcon = () => {\r\n    switch (props.navlet.name) {\r\n      case \"items\":\r\n        if (context.collections === props.navlet.name) {\r\n          return <Items className=\"iconsvgselected\" />;\r\n        }\r\n        return <Items className=\"iconsvg\" />;\r\n      case \"skills\":\r\n        if (context.collections === props.navlet.name) {\r\n          return <Skills className=\"iconsvgselected\" />;\r\n        }\r\n        return <Skills className=\"iconsvg\" />;\r\n      case \"traits\":\r\n        if (context.collections === props.navlet.name) {\r\n          return <Traits className=\"iconsvgselected\" />;\r\n        }\r\n        return <Traits className=\"iconsvg\" />;\r\n      case \"spells\":\r\n        if (context.collections === props.navlet.name) {\r\n          return <Spells className=\"iconsvgselected\" />;\r\n        }\r\n        return <Spells className=\"iconsvg\" />;\r\n      case \"creatures\":\r\n        if (context.collections === props.navlet.name) {\r\n          return <Creatures className=\"iconsvgselected\" />;\r\n        }\r\n        return <Creatures className=\"iconsvg\" />;\r\n      case \"expeditions\":\r\n        if (context.collections === props.navlet.name) {\r\n          return <FaTree className=\"iconsvg\" />;\r\n        }\r\n        return <FaTree className=\"iconsvg\" />;\r\n      case \"props\":\r\n        if (context.collections === props.navlet.name) {\r\n          return <FaPuzzlePiece className=\"iconsvg\" />;\r\n        }\r\n        return <FaPuzzlePiece className=\"iconsvg\" />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className={\r\n        context.collections === props.navlet.name\r\n          ? \"link button--selected bordered flexgrow\"\r\n          : \"link button bordered flexgrow\"\r\n      }\r\n      onClick={() =>\r\n        setContext(() => {\r\n          let newcontext = context;\r\n          newcontext.collections = props.navlet.name;\r\n          newcontext.search = \"\";\r\n          let final = JSON.parse(JSON.stringify(newcontext));\r\n          return final;\r\n        })\r\n      }\r\n    >\r\n      {displayIcon()}\r\n      {context.collections === props.navlet.name && (\r\n        <span className=\"navletSpan\">{props.navlet.display}</span>\r\n      )}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Navlet;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Card.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\RollCard.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Defense.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Name.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\NameValuePair.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Description.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\Stat.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Flavor.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Tag.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Table.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\Ranks.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\AddSubtract.js",["240","241"],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\SpellCostCard.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\data\\worldstate.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\pages\\WorldSheet.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\ExportCard.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\SaveCard.js",["242"],"import React, { useState, useContext } from \"react\";\r\nimport Name from \"../cards/Name\";\r\nimport Description from \"../cards/Description\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Character from \"../data/character.js\";\r\nimport WorldState from \"../data/worldstate.js\";\r\nimport { FaRegTrashAlt, FaRegFolderOpen } from \"react-icons/fa\";\r\n\r\nconst SaveCard = (props) => {\r\n  const [character] = useContext(Character);\r\n  const [worldState] = useContext(WorldState);\r\n  const [expanded, setExpanded] = useState(false);\r\n  const [confirm, setConfirm] = useState(false);\r\n  const [confirmType, setConfirmType] = useState({});\r\n\r\n  const { context, eachSlot, saveSlot, loadSlot, deleteSlot, slot } = props;\r\n\r\n  const gate = () => {\r\n    if (context === \"character\") {\r\n      return character;\r\n    }\r\n    if (context === \"worldstate\") {\r\n      return worldState;\r\n    }\r\n  };\r\n\r\n  const expandCollapse = (status) => {\r\n    setExpanded(!status);\r\n  };\r\n\r\n  const confirmToggle = (status) => {\r\n    setConfirm(!status);\r\n  };\r\n\r\n  const confirmAction = () => {\r\n    switch (confirmType.type) {\r\n      case \"overwrite\":\r\n        saveSlot(slot, gate());\r\n        break;\r\n      case \"delete\":\r\n        deleteSlot(slot);\r\n        break;\r\n      case \"load\":\r\n        loadSlot(slot);\r\n    }\r\n    confirmToggle(confirm);\r\n  };\r\n\r\n  const stats = [\r\n    { name: \"Level\", value: \"level\" },\r\n    { name: \"Life\", value: \"life\" },\r\n    { name: \"Cash\", value: \"CASH\" },\r\n    { name: \"XP\", value: \"XP\" },\r\n    { name: \"Type\", value: \"type\" },\r\n  ];\r\n\r\n  if (eachSlot.name === undefined) {\r\n    return (\r\n      <div>\r\n        <span className=\"padded5px outerbox\">(empty)</span>\r\n        <button\r\n          onClick={() => {\r\n            saveSlot(slot, gate());\r\n          }}\r\n          className=\"button bordered padded5px margin5px\"\r\n        >\r\n          save\r\n        </button>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <Col>\r\n        <article className=\"outerbox\">\r\n          <div className=\"row\">\r\n            <Name\r\n              name={eachSlot.name}\r\n              expanded={expanded}\r\n              expandCollapse={expandCollapse}\r\n            />\r\n            <span className=\"rightfloat mright15px\">\r\n              <FaRegFolderOpen\r\n                className=\"icon mright3px\"\r\n                onClick={() => {\r\n                  confirmToggle();\r\n                  setConfirmType({\r\n                    text: `Load this ${props.context}`,\r\n                    type: \"load\",\r\n                  });\r\n                }}\r\n              ></FaRegFolderOpen>\r\n              <FaRegTrashAlt\r\n                className=\"icon mright3px\"\r\n                onClick={() => {\r\n                  //deleteSlot(slot);\r\n                  confirmToggle();\r\n                  setConfirmType({\r\n                    text: `Delete this ${props.context}`,\r\n                    type: \"delete\",\r\n                  });\r\n                }}\r\n              ></FaRegTrashAlt>\r\n            </span>\r\n          </div>\r\n          {expanded === true && (\r\n            <span>\r\n              <hr></hr>\r\n              <Description description={\"(placeholder)\"} />\r\n              <hr></hr>\r\n              {stats.map((stat, index) => {\r\n                return (\r\n                  <div className=\"padded5px\" key={index}>\r\n                    {stat.name}: {eachSlot[stat.value]}\r\n                  </div>\r\n                );\r\n              })}\r\n              <hr></hr>\r\n            </span>\r\n          )}\r\n          {confirm === true && (\r\n            //flex these\r\n            <div>\r\n              <hr></hr>\r\n              <button\r\n                className=\"button bordered padded5px margin5px\"\r\n                onClick={() => {\r\n                  confirmAction();\r\n                }}\r\n              >\r\n                {confirmType.text}\r\n              </button>\r\n              <button\r\n                className=\"button bordered padded5px margin5px\"\r\n                onClick={() => {\r\n                  confirmToggle(confirm);\r\n                }}\r\n              >\r\n                No\r\n              </button>\r\n            </div>\r\n          )}\r\n        </article>\r\n      </Col>\r\n    );\r\n  }\r\n};\r\n\r\nexport default SaveCard;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\SaveModal.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\ExportModal.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\ImportCard.js",["243"],"import React, { useState, useContext } from \"react\";\r\nimport Name from \"../cards/Name\";\r\nimport Description from \"../cards/Description\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { FaFileUpload } from \"react-icons/fa\";\r\nimport Character from \"../data/character.js\";\r\n\r\nconst ImportCard = (props) => {\r\n  const [expanded, setExpanded] = useState(false);\r\n  const [character, setCharacter] = useContext(Character);\r\n  const [importData, setImportData] = useState(\"\");\r\n\r\n  const expandCollapse = (status) => {\r\n    setExpanded(!status);\r\n  };\r\n\r\n  const { name, description } = props;\r\n\r\n  const importJson = (string) => {\r\n    setCharacter(JSON.parse(string));\r\n  };\r\n\r\n  return (\r\n    <Col>\r\n      <article className=\"outerbox\">\r\n        <div className=\"row\">\r\n          <Name\r\n            name={name}\r\n            expanded={expanded}\r\n            expandCollapse={expandCollapse}\r\n          />\r\n          <FaFileUpload\r\n            className=\"rightfloat icon mright24px mtop12px\"\r\n            onClick={() => {\r\n              expandCollapse(expanded);\r\n            }}\r\n          />\r\n        </div>\r\n        {expanded === true && (\r\n          <span>\r\n            <hr></hr>\r\n            <Description description={description} />\r\n            <hr></hr>\r\n            <textarea\r\n              className=\"textarea\"\r\n              name=\"importChar\"\r\n              id=\"importChar\"\r\n              cols=\"40\"\r\n              rows=\"5\"\r\n              onChange={(e) => setImportData(e.target.value)}\r\n            ></textarea>\r\n            <button\r\n              className=\"button bordered padded5px fullwidth\"\r\n              onClick={() => {\r\n                importJson(importData);\r\n              }}\r\n            >\r\n              Import\r\n            </button>\r\n          </span>\r\n        )}\r\n      </article>\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default ImportCard;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\charactersheet\\SlotName.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardCreature.js",["244","245","246","247","248"],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardItem.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardSpell.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalItemAttack.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalItemSale.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardExpedition.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalSpellCast.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalCreatureAttack.js",["249"],"import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport architecture from \"../data/architecture.json\";\r\nimport NameValuePair from \"./NameValuePair.js\";\r\nimport toaster from \"toasted-notes\";\r\nimport \"toasted-notes/src/styles.css\";\r\nimport {\r\n  r,\r\n  test,\r\n  damagecalc,\r\n  toggleState,\r\n  toggle,\r\n  withProAdv,\r\n} from \"../utils/exports.js\";\r\n\r\nfunction ModalCreatureAttack(props) {\r\n  const [target, setTarget] = useState(10);\r\n  const [attackResult, setAttackResult] = useState(\"\");\r\n  const [attackMessage, setAttackMessage] = useState(\"\");\r\n  const [attack, setAttack] = useState({ adv: \"\" });\r\n  const [damage, setDamage] = useState({ adv: \"\" });\r\n\r\n  const {\r\n    attackModalOpen,\r\n    setAttackModalOpen,\r\n    creatureName,\r\n    attackName,\r\n    attackBonus,\r\n    attackDamage,\r\n    attackStat,\r\n    creatureProperties,\r\n  } = props;\r\n\r\n  const modularString = (object) => {\r\n    let data = withProAdv(object);\r\n    return (\r\n      <span>\r\n        {data.string} {data.mod}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const confirmAttack = () => {\r\n    let pro = 0;\r\n\r\n    let attackRes = test(target, attack.adv, pro, attackBonus);\r\n    let damageResult = damagecalc(attackDamage, damage.adv);\r\n\r\n    if (attackRes.startsWith(\"Critical S\")) {\r\n      damageResult.total = damageResult.total * 2;\r\n      let critRoll = r(20) + 1;\r\n      if (critRoll === \"20\") {\r\n        damageResult.total = damageResult.total * 2;\r\n        attackRes.concat(\"Double \", attackRes);\r\n      }\r\n    }\r\n    if (\r\n      attackRes.startsWith(\"S\") ||\r\n      attackRes.startsWith(\"B\") ||\r\n      attackRes.startsWith(\"Critical S\")\r\n    ) {\r\n      setAttackResult(\r\n        <div>\r\n          {attackRes} <br /> {damageResult.total} {attackStat} damage dealt!{\" \"}\r\n          {damageResult.explosions !== 0 && (\r\n            <span>(Explosions: {damageResult.explosions})</span>\r\n          )}\r\n        </div>\r\n      );\r\n      let damageAdv = \"\";\r\n      if (damage.adv === \"+\") {\r\n        damageAdv = \" [+] \";\r\n      }\r\n      if (damage.adv === \"-\") {\r\n        damageAdv = \" [-] \";\r\n      }\r\n      let message = `${creatureName} attacks using their ${attackName} ${\r\n        withProAdv(attack).string\r\n      }!\\nThe attack is a ${attackRes}\\n${\r\n        damageResult.total\r\n      } ${attackStat} damage ${damageAdv} dealt!`;\r\n      setAttackMessage(message);\r\n    } else {\r\n      let message = `${creatureName} attacks using their ${attackName}${\r\n        withProAdv(attack).string\r\n      }!\\nThe attack is a ${attackRes}`;\r\n      setAttackResult(attackRes);\r\n      setAttackMessage(message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={attackModalOpen}\r\n      onHide={() => {\r\n        toggle(setAttackModalOpen, attackModalOpen);\r\n      }}\r\n    >\r\n      <Modal.Header className=\"modalbackground\">\r\n        <span className=\"cardname\">Attack using {attackName}!</span>\r\n      </Modal.Header>\r\n      <Modal.Body className=\"modalbackground\">\r\n        <div>Attacker: {creatureName}</div>\r\n        <hr />\r\n        {creatureProperties.map((property, index) => {\r\n          if (property.of !== attackName) return;\r\n          return (\r\n            <div key={index}>\r\n              <NameValuePair\r\n                name={property.name}\r\n                value={property.description}\r\n              />\r\n              <hr />\r\n            </div>\r\n          );\r\n        })}\r\n        <div>\r\n          Attack Bonus{modularString(attack)}: {attackBonus}\r\n        </div>\r\n        <div className=\"flex\">\r\n          <button\r\n            className=\"button bordered padded5px margin5px flexgrow\"\r\n            onClick={() => {\r\n              toggleState(attack, setAttack, \"adv\", \"\", \"-\");\r\n            }}\r\n          >\r\n            [-]\r\n          </button>\r\n          <button\r\n            className=\"button bordered padded5px margin5px flexgrow\"\r\n            onClick={() => {\r\n              toggleState(attack, setAttack, \"adv\", \"\", \"+\");\r\n            }}\r\n          >\r\n            [+]\r\n          </button>\r\n        </div>\r\n        <hr />\r\n        <div>\r\n          Damage{modularString(damage)}: {attackDamage}\r\n        </div>\r\n        <div className=\"flex\">\r\n          <button\r\n            className=\"button bordered padded5px margin5px flexgrow\"\r\n            onClick={() => {\r\n              toggleState(damage, setDamage, \"adv\", \"\", \"-\");\r\n            }}\r\n          >\r\n            [-]\r\n          </button>\r\n          <button\r\n            className=\"button bordered padded5px margin5px flexgrow\"\r\n            onClick={() => {\r\n              toggleState(damage, setDamage, \"adv\", \"\", \"+\");\r\n            }}\r\n          >\r\n            [+]\r\n          </button>\r\n        </div>\r\n        <hr />\r\n        <div>\r\n          Target {architecture.statMasks[attackStat]}: {target}\r\n        </div>\r\n        <div className=\"flex\">\r\n          <button\r\n            className=\"button bordered padded5px margin5px flexgrow\"\r\n            onClick={() => {\r\n              setTarget(target - 1);\r\n            }}\r\n          >\r\n            -1\r\n          </button>\r\n          <button\r\n            className=\"button bordered padded5px margin5px flexgrow\"\r\n            onClick={() => {\r\n              setTarget(target + 1);\r\n            }}\r\n          >\r\n            +1\r\n          </button>\r\n        </div>\r\n        <hr />\r\n        <div className=\"flex\">\r\n          <button\r\n            className=\"button bordered padded5px margin5px flexgrow\"\r\n            onClick={() => {\r\n              confirmAttack();\r\n            }}\r\n          >\r\n            Confirm Attack\r\n          </button>\r\n        </div>\r\n        {attackResult !== \"\" && (\r\n          <div>\r\n            <hr />\r\n            <div\r\n              className=\"button padded5px\"\r\n              onClick={() => {\r\n                toaster.notify(\"Attack text copied to clipboard!\", {\r\n                  duration: 1000,\r\n                });\r\n                navigator.clipboard.writeText(attackMessage);\r\n              }}\r\n            >\r\n              {attackResult}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default ModalCreatureAttack;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalCreatureEdit.js",["250","251","252","253","254","255","256","257"],"import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport architecture from \"../data/architecture.json\";\r\nimport NameValuePair from \"./NameValuePair.js\";\r\nimport toaster from \"toasted-notes\";\r\nimport \"toasted-notes/src/styles.css\";\r\nimport {\r\n  r,\r\n  test,\r\n  damagecalc,\r\n  toggleState,\r\n  toggle,\r\n  withProAdv,\r\n} from \"../data/exports.js\";\r\n\r\nfunction ModalCreatureEdit(props) {\r\n  const { editModalOpen, setEditModalOpen, creatureName, creatureProperties } =\r\n    props;\r\n\r\n  return (\r\n    <Modal\r\n      show={editModalOpen}\r\n      onHide={() => {\r\n        toggle(setEditModalOpen, editModalOpen);\r\n      }}\r\n    >\r\n      <Modal.Header className=\"modalbackground\">\r\n        <span className=\"cardname\">Edit {creatureName}!</span>\r\n      </Modal.Header>\r\n      <Modal.Body className=\"modalbackground\">\r\n        {creatureProperties.map((property, index) => {\r\n          return (\r\n            <div key={index}>\r\n              <NameValuePair\r\n                name={property.name}\r\n                value={property.description}\r\n              />\r\n              <hr />\r\n            </div>\r\n          );\r\n        })}\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default ModalCreatureEdit;\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\CardProp.js",["258","259"],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalCardDisplay.js",[],"C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\utils\\exports.js",["260","261"],"import architecture from \"../data/architecture.json\";\r\n\r\n/*\r\n1. Utility\r\n2. Combat\r\n3. Tests\r\n4. Status\r\n*/\r\n\r\n/*\r\n------------------------------------------------------------------\r\n  UTILITY\r\n------------------------------------------------------------------\r\n*/\r\n\r\nconst r = function (c) {\r\n  return Math.floor(Math.random() * c);\r\n};\r\n\r\nconst s = function (array) {\r\n  return array[r(array.length)];\r\n};\r\n\r\nconst multiRoll = (value) => {\r\n  let total = 0;\r\n  let ifexploding = value.slice(-1);\r\n  if (ifexploding === \"*\") {\r\n    value = value.slice(0, -1);\r\n  }\r\n  let dice = value.split(\"d\");\r\n  let times = parseInt(dice[0]);\r\n  let size = parseInt(dice[1]);\r\n  for (let i = 0; i < times; i++) {\r\n    let subtotal = 0;\r\n    let result = r(size) + 1;\r\n    subtotal += result;\r\n    if (result === size && ifexploding === \"*\") {\r\n      console.log(\"BOOM\");\r\n      while (true) {\r\n        let newresult = r(size) + 1;\r\n        subtotal += newresult;\r\n        if (newresult !== size) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    total += subtotal;\r\n  }\r\n  return total;\r\n};\r\n\r\nconst updateState = (object, method, property, value) => {\r\n  let object2 = object;\r\n  object2[property] = value;\r\n  method(JSON.parse(JSON.stringify(object2)));\r\n};\r\n\r\nconst toggleState = (object, method, property, value, togglevalue) => {\r\n  if (object[property] === value) {\r\n    updateState(object, method, property, togglevalue);\r\n  } else {\r\n    updateState(object, method, property, value);\r\n  }\r\n};\r\n\r\nconst toggle = (method, status) => {\r\n  method(!status);\r\n};\r\n\r\n/*\r\n------------------------------------------------------------------\r\n  COMBAT\r\n------------------------------------------------------------------\r\n*/\r\n\r\nconst rdamage = (string) => {\r\n  let split = string.split(\"d\");\r\n\r\n  let base = r(split[split.length - 1]) + 1;\r\n  let nug = split.pop();\r\n  if (split.length > 1) {\r\n    base = base * r(split[split.length - 1]) + 1;\r\n  } else {\r\n    base = base * split[split.length - 1];\r\n  }\r\n  nug = split.pop();\r\n  if (split.length > 0) {\r\n    base = base * split[split.length - 1];\r\n  }\r\n\r\n  return base;\r\n};\r\n\r\nconst damage = (string) => {\r\n  let exploding = false;\r\n  let explosions = 0;\r\n  if (string.substr(string.length - 1) === \"*\") {\r\n    exploding = true;\r\n    string = string.slice(0, -1);\r\n  }\r\n  let total = 0;\r\n  let dice = string.split(\"d\");\r\n  let times = parseInt(dice[0]);\r\n  let size = parseInt(dice[1]);\r\n  for (let i = 0; i < times; i++) {\r\n    let subtotal = 0;\r\n    let result = r(size) + 1;\r\n    subtotal += result;\r\n    //exploding dice\r\n    if (result === size && exploding === true) {\r\n      console.log(\"BOOM\");\r\n      while (true) {\r\n        explosions += 1;\r\n        let newresult = r(size) + 1;\r\n        subtotal += newresult;\r\n        if (newresult !== size) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    total += subtotal;\r\n  }\r\n  return { total: total, explosions: explosions };\r\n};\r\n\r\nconst damagecalc = (string, adv) => {\r\n  let result1;\r\n  let result2;\r\n  if (adv !== \"\") {\r\n    result1 = damage(string);\r\n    result2 = damage(string);\r\n  } else {\r\n    result1 = damage(string);\r\n  }\r\n\r\n  if (adv === \"+\") {\r\n    if (result1.total > result2.total) {\r\n      return result1;\r\n    }\r\n    return result2;\r\n  }\r\n  if (adv === \"-\") {\r\n    if (result1.total < result2.total) {\r\n      return result1;\r\n    }\r\n    return result2;\r\n  }\r\n  return result1;\r\n};\r\n\r\n/*\r\n------------------------------------------------------------------\r\n  TESTS\r\n------------------------------------------------------------------\r\n*/\r\n\r\nconst calcSale = (value) => {\r\n  let valuesplit = value.split(\"x\");\r\n  let roll = multiRoll(valuesplit[0]);\r\n  return roll * parseInt(valuesplit[1]);\r\n};\r\n\r\nconst minitest = (pro, stat) => {\r\n  return r(20) + pro + stat;\r\n};\r\n\r\nconst roll = (adv, pro) => {\r\n  let result = 0;\r\n  let total = 0;\r\n  let text = \"\";\r\n  if (adv === \"+\") {\r\n    let roll1 = r(20) + 1;\r\n    let roll2 = r(20) + 1;\r\n    result = Math.max(roll1, roll2);\r\n    text = \"Results: \" + roll1 + \", \" + roll2;\r\n  } else if (adv === \"-\") {\r\n    let roll1 = r(20) + 1;\r\n    let roll2 = r(20) + 1;\r\n    result = Math.min(roll1, roll2);\r\n    text = \"Results: \" + roll1 + \", \" + roll2;\r\n  } else {\r\n    result = r(20) + 1;\r\n    text = \"Result: \" + result;\r\n  }\r\n  if (pro !== 0) {\r\n    total = result + pro;\r\n  } else {\r\n    total = result;\r\n  }\r\n  return { result: result, total: total, text: text };\r\n};\r\n\r\nconst test = (target, adv, pro, mod) => {\r\n  let rollData = roll(adv, pro);\r\n  let rollResult = rollData.result;\r\n  let rollTotal = parseInt(rollData.total) + parseInt(mod);\r\n  let resultString = \"\";\r\n  if (rollResult === 20 || rollResult === 1) {\r\n    resultString += \"Critical \";\r\n  }\r\n  if (rollTotal === target) {\r\n    resultString += \"Barely a \";\r\n  }\r\n  if (rollTotal >= target) {\r\n    resultString += \"Success\";\r\n  } else {\r\n    resultString += \"Failure\";\r\n  }\r\n  if (rollResult === 7 && rollTotal <= target) {\r\n    resultString += \" with a Silver Lining\";\r\n  }\r\n  if (rollResult === 13 && rollTotal >= target) {\r\n    resultString += \" with a Drawback\";\r\n  }\r\n\r\n  resultString += \"! \" + rollData.text + \". Total: \" + rollTotal + \".\";\r\n  return resultString;\r\n};\r\n\r\nconst haggleRoll = (result, mode) => {\r\n  let multiplier = 1;\r\n  let add = (result - 15) * 0.05;\r\n  if (mode === \"none\") {\r\n    //buying\r\n    multiplier -= add;\r\n  }\r\n  if (mode === \"items\") {\r\n    //selling\r\n    multiplier += add;\r\n  }\r\n  return multiplier;\r\n};\r\n\r\n/*\r\n------------------------------------------------------------------\r\n  STATUS\r\n------------------------------------------------------------------\r\n*/\r\n\r\nconst withProAdv = (object) => {\r\n  let string = \"\";\r\n  let mod = \"\";\r\n  if (object.pro !== undefined) {\r\n    if (object.pro !== \"\" || object.adv !== \"\") {\r\n      string += \" with \";\r\n    }\r\n    if (object.pro === \"single\") {\r\n      string += \"Proficiency\";\r\n    }\r\n    if (object.pro === \"double\") {\r\n      string += \"Double Proficiency\";\r\n    }\r\n    if (object.pro !== \"\" && object.adv !== \"\") {\r\n      string += \" and \";\r\n    }\r\n  } else if (object.adv !== \"\") {\r\n    string += \" with \";\r\n  }\r\n  if (object.adv === \"+\") {\r\n    string += \"Advantage\";\r\n    mod = \"[+]\";\r\n  }\r\n  if (object.adv === \"-\") {\r\n    string += \"Disadvantage\";\r\n    mod = \"[-]\";\r\n  }\r\n  return { string: string, mod: mod };\r\n};\r\n\r\nconst invcalc = (encumbrance, placement, placement2) => {\r\n  return encumbrance.toString().slice(placement, placement2);\r\n};\r\n\r\nconst sackstonesoap = (weight, mode) => {\r\n  let encumbrance = weight;\r\n  let soaps = invcalc(encumbrance, -1);\r\n  let stones = invcalc(encumbrance, -2, -1);\r\n  let sacks = invcalc(encumbrance, -3, -2);\r\n  let array = [\r\n    { amount: sacks, name: \"Sacks\" },\r\n    { amount: stones, name: \"Stones\" },\r\n    { amount: soaps, name: \"Soaps\" },\r\n  ];\r\n  let sackstonesoap = \"\";\r\n  for (let i = 0; i < array.length; i++) {\r\n    let element = array[i];\r\n    let amount = parseInt(element.amount);\r\n    if (amount === 0 || amount === \"\" || amount !== amount) {\r\n      if (mode === \"inventory\") {\r\n        sackstonesoap += \" 0 \" + element.name;\r\n        if (i !== array.length - 1) {\r\n          sackstonesoap += \", \";\r\n        }\r\n      }\r\n    } else {\r\n      sackstonesoap += element.amount + \" \" + element.name;\r\n      if (i < array.length - 1) {\r\n        if (parseInt(array[i + 1].amount) !== 0) {\r\n          sackstonesoap += \", \";\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return sackstonesoap;\r\n};\r\n\r\nconst messageStats = (stat) => {\r\n  return (\r\n    <span>\r\n      {stat.map((eachstat, index) => {\r\n        return (\r\n          <span key={index}>\r\n            <i>{architecture.statMasks[eachstat]}</i>\r\n            {index < 0 && index > stat.length && <span> or </span>}\r\n          </span>\r\n        );\r\n      })}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport {\r\n  r,\r\n  s,\r\n  rdamage,\r\n  multiRoll,\r\n  damagecalc,\r\n  calcSale,\r\n  roll,\r\n  minitest,\r\n  test,\r\n  haggleRoll,\r\n  sackstonesoap,\r\n  updateState,\r\n  toggleState,\r\n  toggle,\r\n  withProAdv,\r\n  messageStats,\r\n};\r\n","C:\\Users\\saker tarsos\\Desktop\\SRDCAT\\src\\cards\\ModalTableDisplay.js",[],{"ruleId":"262","replacedBy":"263"},{"ruleId":"264","replacedBy":"265"},{"ruleId":"266","severity":1,"message":"267","line":15,"column":49,"nodeType":"268","messageId":"269","endLine":15,"endColumn":51},{"ruleId":"266","severity":1,"message":"270","line":22,"column":38,"nodeType":"268","messageId":"271","endLine":22,"endColumn":40},{"ruleId":"266","severity":1,"message":"270","line":30,"column":11,"nodeType":"272","messageId":"273","endLine":30,"endColumn":18},{"ruleId":"274","severity":1,"message":"275","line":39,"column":9,"nodeType":"276","messageId":"277","endLine":39,"endColumn":13},{"ruleId":"274","severity":1,"message":"278","line":30,"column":14,"nodeType":"276","messageId":"277","endLine":30,"endColumn":21},{"ruleId":"279","severity":1,"message":"280","line":12,"column":5,"nodeType":"281","messageId":"282","endLine":28,"endColumn":6},{"ruleId":"266","severity":1,"message":"267","line":39,"column":47,"nodeType":"268","messageId":"269","endLine":39,"endColumn":49},{"ruleId":"266","severity":1,"message":"270","line":46,"column":42,"nodeType":"268","messageId":"271","endLine":46,"endColumn":44},{"ruleId":"266","severity":1,"message":"270","line":53,"column":11,"nodeType":"272","messageId":"273","endLine":53,"endColumn":18},{"ruleId":"274","severity":1,"message":"283","line":12,"column":10,"nodeType":"276","messageId":"277","endLine":12,"endColumn":19},{"ruleId":"274","severity":1,"message":"284","line":15,"column":10,"nodeType":"276","messageId":"277","endLine":15,"endColumn":21},{"ruleId":"279","severity":1,"message":"280","line":14,"column":5,"nodeType":"281","messageId":"282","endLine":50,"endColumn":6},{"ruleId":"274","severity":1,"message":"285","line":3,"column":28,"nodeType":"276","messageId":"277","endLine":3,"endColumn":37},{"ruleId":"274","severity":1,"message":"286","line":4,"column":10,"nodeType":"276","messageId":"277","endLine":4,"endColumn":17},{"ruleId":"279","severity":1,"message":"280","line":36,"column":5,"nodeType":"281","messageId":"282","endLine":45,"endColumn":6},{"ruleId":"274","severity":1,"message":"283","line":10,"column":10,"nodeType":"276","messageId":"277","endLine":10,"endColumn":19},{"ruleId":"274","severity":1,"message":"287","line":9,"column":8,"nodeType":"276","messageId":"277","endLine":9,"endColumn":16},{"ruleId":"274","severity":1,"message":"288","line":11,"column":10,"nodeType":"276","messageId":"277","endLine":11,"endColumn":21},{"ruleId":"274","severity":1,"message":"289","line":12,"column":8,"nodeType":"276","messageId":"277","endLine":12,"endColumn":15},{"ruleId":"274","severity":1,"message":"290","line":24,"column":21,"nodeType":"276","messageId":"277","endLine":24,"endColumn":33},{"ruleId":"274","severity":1,"message":"291","line":41,"column":5,"nodeType":"276","messageId":"277","endLine":41,"endColumn":14},{"ruleId":"266","severity":1,"message":"270","line":106,"column":43,"nodeType":"272","messageId":"273","endLine":106,"endColumn":50},{"ruleId":"274","severity":1,"message":"292","line":1,"column":17,"nodeType":"276","messageId":"277","endLine":1,"endColumn":25},{"ruleId":"274","severity":1,"message":"293","line":3,"column":8,"nodeType":"276","messageId":"277","endLine":3,"endColumn":20},{"ruleId":"274","severity":1,"message":"289","line":5,"column":8,"nodeType":"276","messageId":"277","endLine":5,"endColumn":15},{"ruleId":"274","severity":1,"message":"294","line":8,"column":3,"nodeType":"276","messageId":"277","endLine":8,"endColumn":4},{"ruleId":"274","severity":1,"message":"295","line":9,"column":3,"nodeType":"276","messageId":"277","endLine":9,"endColumn":7},{"ruleId":"274","severity":1,"message":"296","line":10,"column":3,"nodeType":"276","messageId":"277","endLine":10,"endColumn":13},{"ruleId":"274","severity":1,"message":"297","line":11,"column":3,"nodeType":"276","messageId":"277","endLine":11,"endColumn":14},{"ruleId":"274","severity":1,"message":"298","line":13,"column":3,"nodeType":"276","messageId":"277","endLine":13,"endColumn":13},{"ruleId":"274","severity":1,"message":"299","line":4,"column":8,"nodeType":"276","messageId":"277","endLine":4,"endColumn":14},{"ruleId":"274","severity":1,"message":"300","line":27,"column":23,"nodeType":"276","messageId":"277","endLine":27,"endColumn":29},{"ruleId":"274","severity":1,"message":"301","line":86,"column":3,"nodeType":"276","messageId":"277","endLine":86,"endColumn":6},{"ruleId":"302","severity":1,"message":"303","line":288,"column":42,"nodeType":"304","messageId":"305","endLine":288,"endColumn":59},"no-native-reassign",["306"],"no-negated-in-lhs",["307"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","expectedInside","ReturnStatement","expectedReturnValue","no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'element' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'character' is assigned a value but never used.","'currentStat' is assigned a value but never used.","'Herosheet' is defined but never used.","'FaGlobe' is defined but never used.","'modsdata' is defined but never used.","'updateState' is defined but never used.","'toaster' is defined but never used.","'setCharacter' is assigned a value but never used.","'modifiers' is assigned a value but never used.","'useState' is defined but never used.","'architecture' is defined but never used.","'r' is defined but never used.","'test' is defined but never used.","'damagecalc' is defined but never used.","'toggleState' is defined but never used.","'withProAdv' is defined but never used.","'Flavor' is defined but never used.","'flavor' is assigned a value but never used.","'nug' is assigned a value but never used.","no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf","no-global-assign","no-unsafe-negation"]